{"env":{"BASE_PATH":"","ARTICLES_ROOT":".articles","ARTICLE_FILENAME":"README.md"},"__N_SSG":true,"pageProps":{"post":{"href":"3","round":3,"paths":["svelte","svelte-setting-and-component"],"slug":"svelte-setting-and-component","title":"Svelte로 만드는 TODO-App (1), Svelte 설치하기 / 컴포넌트 구성하기","description":"","date":"2019-11-17","category":"svelte","tags":["javascript","frontend","svelte"],"seriesId":2,"markdown":"\n![svelte](/svelte/svelte-setting-and-component/img/svelte_2.png)\n\n최신 프론트엔드 기술 중 [Svelte](https://svelte.dev/)라는 기술에 대해 TODO-App 제작을 하면서 알아보겠습니다.\n\nSvelte에 대한 소개나 API는 [공식문서](https://svelte.dev/docs)나 아래의 자료를 읽어주세요.\n\n- [웹 프레임워크 Svelte를 소개합니다.](https://velog.io/@ashnamuh/hello-svelte)\n- [SvelteJS(스벨트) - 새로운 개념의 프론트엔드 프레임워크](https://heropy.blog/2019/09/29/svelte/)\n\n_이 글은 Svelte 실습 예제입니다._\n*전체 프로젝트 코드는 [Github](https://github.com/hoontae24/hello-svelte)에서 보실 수 있습니다.*\n\n---\n\n### 1. Svelte 설치하기\n\n먼저 Svelte를 설치합니다. Svelte 공식 사이트의 [QuickStart Guide](https://svelte.dev/blog/the-easiest-way-to-get-started)를 참조해 주세요.\n\n터미널에서 degit을 이용해서 Svelte 프로젝트 템플릿을 내려받을 수 있습니다.\n\n> $ npx degit sveltejs/template svelte-todo-app  \n> $ cd svelte-todo-app  \n> $ npm install  \n> $ npm run dev\n\n위의 작업을 마치고 [http://localhost:5000](http://localhost:5000)에 접속해봅니다. 프로젝트 설치는 잘된 것 같습니다.\n\n![Svelte_Helloword](/svelte/svelte-setting-and-component/img/svelte_helloworld.png)\n\n### 2. 컴포넌트 만들기\n\nTODO를 구성할 \"할 일\" 항목은 **Item**입니다.\n**Item**이 모여서 **Board**를 구성하고, **Board**를 통해 \"할 일의 진행 상태\"를 구분하도록 하겠습니다.\n그리고 꼭 필요한 것은 아니지만, **Appbar**를 만들도록 하겠습니다.\n\n그리고 저는 CSS 디자인 감각이 없어서 부트스트랩의 도움을 받도록 하겠습니다.  \n구글에서 `부트스트랩`을 검색하고 홈페이지에서 CDN을 가져오겠습니다.\n\n![Appbar](/svelte/svelte-setting-and-component/img/svelte_bootstrap.png)\n\n프로젝트에서 `public/index.html` 파일의 `<head>`태그 안에 cdn을 붙여 넣어줍니다.\n\n```html\n<!-- public/index.html -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n  integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n  crossorigin=\"anonymous\"\n/>\n```\n\n#### 2.1 Appbar 컴포넌트 만들기\n\n먼저 Appbar를 만들겠습니다. 없어도 전혀 지장이 없지만, 너무 밋밋하면 재미없으니까요.\n\n`/src` 폴더 아래에 `components`폴더를 만들고, 그 아래 `Appbar.svelte` 파일을 만들겠습니다. 또 `Board.svelte`와 `Item.svelte` 파일도 미리 만들어 두겠습니다.\n\n![디렉토리](/svelte/svelte-setting-and-component/img/svelte_diretory.png)\n\n**Appbar**에는 간단하게 제목 정도 나오게 만들어 주겠습니다.\n\n```html\n<!-- Appbar.svelte -->\n<script>\n  const appTitle = 'Svelte Todo App'\n</script>\n\n<div class=\"appbar\">\n  <h1 class=\"title\">{appTitle}</h1>\n</div>\n\n<style>\n  .appbar {\n    background-color: darkslategrey;\n    padding: 8px;\n  }\n\n  .appbar > .title {\n    text-align: center;\n    color: white;\n  }\n</style>\n```\n\n`App.svelte` 파일로 가서 **Appbar** 컴포넌트를 추가해 주겠습니다.\n\n`<script>`태그 가장 위에 `import` 구문을 입력하고, 페이지에 표시될 태그 상단에 `<Appbar />`를 추가해줍니다.\n\n```html\n<!-- App.svelte -->\n<script>\n  import Appbar from './components/Appbar.svelte'\n\n  export let name\n</script>\n\n<style>\n  h1 {\n    color: purple;\n  }\n</style>\n\n<Appbar />\n<h1>Hello {name}!</h1>\n```\n\n그리고 앱의 내용들이 가운데 올 수 있도록 `Container`로 감싸도록 하겠습니다.\n\n`src/App.svelte` 파일을 수정합니다. 기존의 내용 부분에 있던 코드를 `container`클래스를 가진 `<div>`태그로 감싸줍니다. 부트스트랩에 정의된 클래스이기 때문에 `<div>`태그가 [컨테이너](https://getbootstrap.com/docs/4.3/layout/overview/) 역할을 합니다.\n\n```html\n<!-- App.svelte -->\n<div class=\"container\">\n  <h1>Hello {name}!</h1>\n</div>\n```\n\n이제 브라우저에 가서 확인해 봅니다.\n\n![Appbar](/svelte/svelte-setting-and-component/img/svelte_appbar.png)\n\n**Appbar**와 **부트스트랩**이 적용된 **Container**가 잘 나오는 것을 확인할 수 있습니다.\n\n#### 2.2 Board 컴포넌트 만들기\n\n다음은 제대로 Todo-App에 쓰일 부분들을 만들도록 하겠습니다.\n\n`src/components/Board.svelte`로 가서 **Board**를 만들도록 하겠습니다.\n\n먼저 간단하게 제목 정도만 표시할 수 있도록 해주겠습니다.\n\n```html\n<!-- Board.svelte -->\n<script>\n  export let board = null\n</script>\n\n{#if board}\n<div class=\"board wrapper card\">\n  <!-- 부트스트랩의 card 디자인 이용 -->\n  <div class=\"card-body\">\n    {board.title}\n  </div>\n</div>\n{/if}\n\n<style>\n  .board.wrapper {\n    background-color: #e9ecef;\n  }\n</style>\n```\n\n기초적인 문법을 잠깐 짚고 넘어가겠습니다.\n\n```javascript\nexport let board = null\n```\n\n`Svelte`에서 `<script>`태그 내부에 `export`구문을 쓰면 부모 컴포넌트의 값을 받아오는 **props**가 됩니다. (만약 부모 컴포넌트에서 넘겨주는 값이 없다면 여기서는 `null`로 지정됩니다.)\n\n```html\n<div class=\"card-body\">\n  {board.title}\n</div>\n```\n\n일반적인 html태그를 쓰는 부분에서 {}를 이용하여 script에서 선언한 변수를 참조할 수 있습니다. `{board.title}`은 부모 컴포넌트에서 넘겨준 `board`객체의 `title`속성을 가져옵니다.\n\n이제 부모 컴포넌트인 `App.svelte`로 가서 **Board**를 구성해줍니다.\n\n`<script>`태그 상단에서 `Board`컴포넌트를 불러옵니다.\n\n```javascript\nimport Board from './components/Board.svelte'\n```\n\n그리고 그 아래에 Board로 사용할 임시 데이터를 선언해줍니다.\n\n```javascript\nconst boards = [\n  { title: 'Planning' },\n  { title: 'In Progress' },\n  { title: 'All Done' },\n]\n```\n\n`container`안쪽 부분의 원래 내용을 지우고 Board를 다음과 같이 작성합니다.\n\n```html\n<div class=\"container\">\n  {#each boards as board}\n  <div class=\"item\">\n    <Board board={board} />\n  </div>\n  {/each}\n</div>\n```\n\n`Svelte`의 `#each`구문은 [여기](https://svelte.dev/docs#each)서 확인하세요.  \nitems 배열에 있는 값을 하나씩 꺼내 item이라는 변수로 참조하게 합니다.\n\n```html\n<Board board={board} />\n```\n\n`<Board>` 컴포넌트의 `board`속성으로 값을 지정하면 `Board.svelte`에서 `export` 구문으로 선언한 `board`에 전달됩니다.\n\n각 `Board`에 CSS를 약간 추가해줍니다.\n\n```html\n<style>\n  .container {\n    overflow: auto;\n    display: flex;\n  }\n  .container .item {\n    width: 300px;\n    flex-grow: 1;\n    margin: 32px;\n  }\n</style>\n```\n\n그리고 전체 페이지의 배경화면을 약간 어둡게 바꾸겠습니다.  \n`public/global.css`파일의 `body`부분에 다음과 같이 추가하겠습니다.\n\n```css\nbody {\n  padding: 0px; /* padding: 8px;에서 수정 */\n  background-color: #ccc !important; /* 추가 */\n}\n```\n\n제대로 동작하는지 확인해 보겠습니다.\n\n![-](/svelte/svelte-setting-and-component/img/svelte_board.png)\n\n`App.svelte`에 선언한 `boards`의 데이터가 컴포넌트의 속성을 통해서 주입된 것을 확인할 수 있습니다.\n\n#### 2.3 Item 컴포넌트 만들기\n\n먼저 `item`으로 사용될 임시 데이터를 만듭니다.\n\n`App.svelte`파일의 `<script>`태그에 다음 내용을 추가해줍니다.\n\n```javascript\nconst items = [\n  { id: 1, boardId: 1, title: '자료 조사하기', done: false },\n  { id: 2, boardId: 1, title: '교양책 읽기', done: false },\n  { id: 3, boardId: 2, title: '분리수거하기', done: false },\n  { id: 4, boardId: 2, title: '가계부 정리하기', done: false },\n  { id: 5, boardId: 3, title: '버그 수정하기', done: false },\n]\n```\n\n그리고 이전에 만들어 둔 `boards`데이터에 `id`속성을 추가해줍니다.\n\n```javascript\nconst boards = [\n  { id: 1, title: 'Planning' },\n  { id: 2, title: 'In Progress' },\n  { id: 3, title: 'All Done' },\n]\n```\n\n각 `item`들은 자신이 속하는 `Board`의 `id`값을 가지고 있습니다.\n\n`Board.svelte`파일로 가서 `Board`의 제목 아래에 `item`들이 표시되도록 합니다.\n\n```html\n<!-- Board.svelte -->\n<script>\n  import Item from './Item.svelte' // Item 컴포넌트를 불러옵니다.\n\n  export let board = null\n  export let items = [] // App 컴포넌트에서 전달하는 items를 받습니다.\n</script>\n\n{#if board}\n<div class=\"board wrapper card\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">\n      {board.title}\n    </h5>\n    {#each items as item (item.id)}\n    <Item {item} />\n    <!-- <Item item={item} />과 동일함. 속성과 변수명이 같으면 생략가능 -->\n    {/each}\n  </div>\n</div>\n{/if}\n\n<style>\n  .board.wrapper {\n    background-color: #ebebeb;\n  }\n</style>\n```\n\n`Item.svelte`파일에서 `item`이 표시되도록 다음과 같이 작성해줍니다. (주석으로 표시한 부분만 이해하면 됩니다.)\n\n```html\n<!-- Item.svelte -->\n<script>\n  export let item = null // Board에서 item값을 전달 받습니다.\n  let hovering = false\n</script>\n\n{#if item}\n<div\n  class=\"item card p-1 mb-1 shadow-sm\"\n\tclass:shadow={hovering}\n\ton:mouseenter={() => hovering = true}\n\ton:mouseleave={() => hovering = false}\n>\n  <span>\n    {item.title}\n    <!-- item의 제목을 출력합니다. -->\n  </span>\n</div>\n{/if}\n\n<style>\n  .item {\n    transition: box-shadow 0.25s ease-in;\n  }\n</style>\n```\n\n![-](/svelte/svelte-setting-and-component/img/svelte_item.png)\n\n각 `item`의 제목도 잘 출력되고, hover에도 반응하는 것을 볼 수 있습니다.\n\n---\n\n다음 시간에는 임시로 만들었던 `boards`와 `items` 데이터를 `store`로 분리해 관리하고, 추가/삭제 등의 동작도 구현해보겠습니다.\n\n*전체 프로젝트 코드는 [Github](https://github.com/hoontae24/hello-svelte)에서 보실 수 있습니다.*\n","html":"<p><img src=\"/svelte/svelte-setting-and-component/img/svelte_2.png\" alt=\"svelte\"></p>\n<p>최신 프론트엔드 기술 중 <a href=\"https://svelte.dev/\">Svelte</a>라는 기술에 대해 TODO-App 제작을 하면서 알아보겠습니다.</p>\n<p>Svelte에 대한 소개나 API는 <a href=\"https://svelte.dev/docs\">공식문서</a>나 아래의 자료를 읽어주세요.</p>\n<ul>\n<li><a href=\"https://velog.io/@ashnamuh/hello-svelte\">웹 프레임워크 Svelte를 소개합니다.</a></li>\n<li><a href=\"https://heropy.blog/2019/09/29/svelte/\">SvelteJS(스벨트) - 새로운 개념의 프론트엔드 프레임워크</a></li>\n</ul>\n<p><em>이 글은 Svelte 실습 예제입니다.</em>\n<em>전체 프로젝트 코드는 <a href=\"https://github.com/hoontae24/hello-svelte\">Github</a>에서 보실 수 있습니다.</em></p>\n<hr>\n<h3 id=\"1-svelte-설치하기\">1. Svelte 설치하기</h3>\n<p>먼저 Svelte를 설치합니다. Svelte 공식 사이트의 <a href=\"https://svelte.dev/blog/the-easiest-way-to-get-started\">QuickStart Guide</a>를 참조해 주세요.</p>\n<p>터미널에서 degit을 이용해서 Svelte 프로젝트 템플릿을 내려받을 수 있습니다.</p>\n<blockquote>\n<p>$ npx degit sveltejs/template svelte-todo-app<br>$ cd svelte-todo-app<br>$ npm install<br>$ npm run dev</p>\n</blockquote>\n<p>위의 작업을 마치고 <a href=\"http://localhost:5000\">http://localhost:5000</a>에 접속해봅니다. 프로젝트 설치는 잘된 것 같습니다.</p>\n<p><img src=\"/svelte/svelte-setting-and-component/img/svelte_helloworld.png\" alt=\"Svelte_Helloword\"></p>\n<h3 id=\"2-컴포넌트-만들기\">2. 컴포넌트 만들기</h3>\n<p>TODO를 구성할 &quot;할 일&quot; 항목은 <strong>Item</strong>입니다.\n<strong>Item</strong>이 모여서 <strong>Board</strong>를 구성하고, <strong>Board</strong>를 통해 &quot;할 일의 진행 상태&quot;를 구분하도록 하겠습니다.\n그리고 꼭 필요한 것은 아니지만, <strong>Appbar</strong>를 만들도록 하겠습니다.</p>\n<p>그리고 저는 CSS 디자인 감각이 없어서 부트스트랩의 도움을 받도록 하겠습니다.<br>구글에서 <code>부트스트랩</code>을 검색하고 홈페이지에서 CDN을 가져오겠습니다.</p>\n<p><img src=\"/svelte/svelte-setting-and-component/img/svelte_bootstrap.png\" alt=\"Appbar\"></p>\n<p>프로젝트에서 <code>public/index.html</code> 파일의 <code>&lt;head&gt;</code>태그 안에 cdn을 붙여 넣어줍니다.</p>\n<pre><code class=\"language-html\">&lt;!-- public/index.html --&gt;\n&lt;link\n  rel=&quot;stylesheet&quot;\n  href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&quot;\n  integrity=&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&quot;\n  crossorigin=&quot;anonymous&quot;\n/&gt;\n</code></pre>\n<h4 id=\"21-appbar-컴포넌트-만들기\">2.1 Appbar 컴포넌트 만들기</h4>\n<p>먼저 Appbar를 만들겠습니다. 없어도 전혀 지장이 없지만, 너무 밋밋하면 재미없으니까요.</p>\n<p><code>/src</code> 폴더 아래에 <code>components</code>폴더를 만들고, 그 아래 <code>Appbar.svelte</code> 파일을 만들겠습니다. 또 <code>Board.svelte</code>와 <code>Item.svelte</code> 파일도 미리 만들어 두겠습니다.</p>\n<p><img src=\"/svelte/svelte-setting-and-component/img/svelte_diretory.png\" alt=\"디렉토리\"></p>\n<p><strong>Appbar</strong>에는 간단하게 제목 정도 나오게 만들어 주겠습니다.</p>\n<pre><code class=\"language-html\">&lt;!-- Appbar.svelte --&gt;\n&lt;script&gt;\n  const appTitle = &#39;Svelte Todo App&#39;\n&lt;/script&gt;\n\n&lt;div class=&quot;appbar&quot;&gt;\n  &lt;h1 class=&quot;title&quot;&gt;{appTitle}&lt;/h1&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n  .appbar {\n    background-color: darkslategrey;\n    padding: 8px;\n  }\n\n  .appbar &gt; .title {\n    text-align: center;\n    color: white;\n  }\n&lt;/style&gt;\n</code></pre>\n<p><code>App.svelte</code> 파일로 가서 <strong>Appbar</strong> 컴포넌트를 추가해 주겠습니다.</p>\n<p><code>&lt;script&gt;</code>태그 가장 위에 <code>import</code> 구문을 입력하고, 페이지에 표시될 태그 상단에 <code>&lt;Appbar /&gt;</code>를 추가해줍니다.</p>\n<pre><code class=\"language-html\">&lt;!-- App.svelte --&gt;\n&lt;script&gt;\n  import Appbar from &#39;./components/Appbar.svelte&#39;\n\n  export let name\n&lt;/script&gt;\n\n&lt;style&gt;\n  h1 {\n    color: purple;\n  }\n&lt;/style&gt;\n\n&lt;Appbar /&gt;\n&lt;h1&gt;Hello {name}!&lt;/h1&gt;\n</code></pre>\n<p>그리고 앱의 내용들이 가운데 올 수 있도록 <code>Container</code>로 감싸도록 하겠습니다.</p>\n<p><code>src/App.svelte</code> 파일을 수정합니다. 기존의 내용 부분에 있던 코드를 <code>container</code>클래스를 가진 <code>&lt;div&gt;</code>태그로 감싸줍니다. 부트스트랩에 정의된 클래스이기 때문에 <code>&lt;div&gt;</code>태그가 <a href=\"https://getbootstrap.com/docs/4.3/layout/overview/\">컨테이너</a> 역할을 합니다.</p>\n<pre><code class=\"language-html\">&lt;!-- App.svelte --&gt;\n&lt;div class=&quot;container&quot;&gt;\n  &lt;h1&gt;Hello {name}!&lt;/h1&gt;\n&lt;/div&gt;\n</code></pre>\n<p>이제 브라우저에 가서 확인해 봅니다.</p>\n<p><img src=\"/svelte/svelte-setting-and-component/img/svelte_appbar.png\" alt=\"Appbar\"></p>\n<p><strong>Appbar</strong>와 <strong>부트스트랩</strong>이 적용된 <strong>Container</strong>가 잘 나오는 것을 확인할 수 있습니다.</p>\n<h4 id=\"22-board-컴포넌트-만들기\">2.2 Board 컴포넌트 만들기</h4>\n<p>다음은 제대로 Todo-App에 쓰일 부분들을 만들도록 하겠습니다.</p>\n<p><code>src/components/Board.svelte</code>로 가서 <strong>Board</strong>를 만들도록 하겠습니다.</p>\n<p>먼저 간단하게 제목 정도만 표시할 수 있도록 해주겠습니다.</p>\n<pre><code class=\"language-html\">&lt;!-- Board.svelte --&gt;\n&lt;script&gt;\n  export let board = null\n&lt;/script&gt;\n\n{#if board}\n&lt;div class=&quot;board wrapper card&quot;&gt;\n  &lt;!-- 부트스트랩의 card 디자인 이용 --&gt;\n  &lt;div class=&quot;card-body&quot;&gt;\n    {board.title}\n  &lt;/div&gt;\n&lt;/div&gt;\n{/if}\n\n&lt;style&gt;\n  .board.wrapper {\n    background-color: #e9ecef;\n  }\n&lt;/style&gt;\n</code></pre>\n<p>기초적인 문법을 잠깐 짚고 넘어가겠습니다.</p>\n<pre><code class=\"language-javascript\">export let board = null\n</code></pre>\n<p><code>Svelte</code>에서 <code>&lt;script&gt;</code>태그 내부에 <code>export</code>구문을 쓰면 부모 컴포넌트의 값을 받아오는 <strong>props</strong>가 됩니다. (만약 부모 컴포넌트에서 넘겨주는 값이 없다면 여기서는 <code>null</code>로 지정됩니다.)</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;card-body&quot;&gt;\n  {board.title}\n&lt;/div&gt;\n</code></pre>\n<p>일반적인 html태그를 쓰는 부분에서 {}를 이용하여 script에서 선언한 변수를 참조할 수 있습니다. <code>{board.title}</code>은 부모 컴포넌트에서 넘겨준 <code>board</code>객체의 <code>title</code>속성을 가져옵니다.</p>\n<p>이제 부모 컴포넌트인 <code>App.svelte</code>로 가서 <strong>Board</strong>를 구성해줍니다.</p>\n<p><code>&lt;script&gt;</code>태그 상단에서 <code>Board</code>컴포넌트를 불러옵니다.</p>\n<pre><code class=\"language-javascript\">import Board from &#39;./components/Board.svelte&#39;\n</code></pre>\n<p>그리고 그 아래에 Board로 사용할 임시 데이터를 선언해줍니다.</p>\n<pre><code class=\"language-javascript\">const boards = [\n  { title: &#39;Planning&#39; },\n  { title: &#39;In Progress&#39; },\n  { title: &#39;All Done&#39; },\n]\n</code></pre>\n<p><code>container</code>안쪽 부분의 원래 내용을 지우고 Board를 다음과 같이 작성합니다.</p>\n<pre><code class=\"language-html\">&lt;div class=&quot;container&quot;&gt;\n  {#each boards as board}\n  &lt;div class=&quot;item&quot;&gt;\n    &lt;Board board={board} /&gt;\n  &lt;/div&gt;\n  {/each}\n&lt;/div&gt;\n</code></pre>\n<p><code>Svelte</code>의 <code>#each</code>구문은 <a href=\"https://svelte.dev/docs#each\">여기</a>서 확인하세요.<br>items 배열에 있는 값을 하나씩 꺼내 item이라는 변수로 참조하게 합니다.</p>\n<pre><code class=\"language-html\">&lt;Board board={board} /&gt;\n</code></pre>\n<p><code>&lt;Board&gt;</code> 컴포넌트의 <code>board</code>속성으로 값을 지정하면 <code>Board.svelte</code>에서 <code>export</code> 구문으로 선언한 <code>board</code>에 전달됩니다.</p>\n<p>각 <code>Board</code>에 CSS를 약간 추가해줍니다.</p>\n<pre><code class=\"language-html\">&lt;style&gt;\n  .container {\n    overflow: auto;\n    display: flex;\n  }\n  .container .item {\n    width: 300px;\n    flex-grow: 1;\n    margin: 32px;\n  }\n&lt;/style&gt;\n</code></pre>\n<p>그리고 전체 페이지의 배경화면을 약간 어둡게 바꾸겠습니다.<br><code>public/global.css</code>파일의 <code>body</code>부분에 다음과 같이 추가하겠습니다.</p>\n<pre><code class=\"language-css\">body {\n  padding: 0px; /* padding: 8px;에서 수정 */\n  background-color: #ccc !important; /* 추가 */\n}\n</code></pre>\n<p>제대로 동작하는지 확인해 보겠습니다.</p>\n<p><img src=\"/svelte/svelte-setting-and-component/img/svelte_board.png\" alt=\"-\"></p>\n<p><code>App.svelte</code>에 선언한 <code>boards</code>의 데이터가 컴포넌트의 속성을 통해서 주입된 것을 확인할 수 있습니다.</p>\n<h4 id=\"23-item-컴포넌트-만들기\">2.3 Item 컴포넌트 만들기</h4>\n<p>먼저 <code>item</code>으로 사용될 임시 데이터를 만듭니다.</p>\n<p><code>App.svelte</code>파일의 <code>&lt;script&gt;</code>태그에 다음 내용을 추가해줍니다.</p>\n<pre><code class=\"language-javascript\">const items = [\n  { id: 1, boardId: 1, title: &#39;자료 조사하기&#39;, done: false },\n  { id: 2, boardId: 1, title: &#39;교양책 읽기&#39;, done: false },\n  { id: 3, boardId: 2, title: &#39;분리수거하기&#39;, done: false },\n  { id: 4, boardId: 2, title: &#39;가계부 정리하기&#39;, done: false },\n  { id: 5, boardId: 3, title: &#39;버그 수정하기&#39;, done: false },\n]\n</code></pre>\n<p>그리고 이전에 만들어 둔 <code>boards</code>데이터에 <code>id</code>속성을 추가해줍니다.</p>\n<pre><code class=\"language-javascript\">const boards = [\n  { id: 1, title: &#39;Planning&#39; },\n  { id: 2, title: &#39;In Progress&#39; },\n  { id: 3, title: &#39;All Done&#39; },\n]\n</code></pre>\n<p>각 <code>item</code>들은 자신이 속하는 <code>Board</code>의 <code>id</code>값을 가지고 있습니다.</p>\n<p><code>Board.svelte</code>파일로 가서 <code>Board</code>의 제목 아래에 <code>item</code>들이 표시되도록 합니다.</p>\n<pre><code class=\"language-html\">&lt;!-- Board.svelte --&gt;\n&lt;script&gt;\n  import Item from &#39;./Item.svelte&#39; // Item 컴포넌트를 불러옵니다.\n\n  export let board = null\n  export let items = [] // App 컴포넌트에서 전달하는 items를 받습니다.\n&lt;/script&gt;\n\n{#if board}\n&lt;div class=&quot;board wrapper card&quot;&gt;\n  &lt;div class=&quot;card-body&quot;&gt;\n    &lt;h5 class=&quot;card-title&quot;&gt;\n      {board.title}\n    &lt;/h5&gt;\n    {#each items as item (item.id)}\n    &lt;Item {item} /&gt;\n    &lt;!-- &lt;Item item={item} /&gt;과 동일함. 속성과 변수명이 같으면 생략가능 --&gt;\n    {/each}\n  &lt;/div&gt;\n&lt;/div&gt;\n{/if}\n\n&lt;style&gt;\n  .board.wrapper {\n    background-color: #ebebeb;\n  }\n&lt;/style&gt;\n</code></pre>\n<p><code>Item.svelte</code>파일에서 <code>item</code>이 표시되도록 다음과 같이 작성해줍니다. (주석으로 표시한 부분만 이해하면 됩니다.)</p>\n<pre><code class=\"language-html\">&lt;!-- Item.svelte --&gt;\n&lt;script&gt;\n  export let item = null // Board에서 item값을 전달 받습니다.\n  let hovering = false\n&lt;/script&gt;\n\n{#if item}\n&lt;div\n  class=&quot;item card p-1 mb-1 shadow-sm&quot;\n    class:shadow={hovering}\n    on:mouseenter={() =&gt; hovering = true}\n    on:mouseleave={() =&gt; hovering = false}\n&gt;\n  &lt;span&gt;\n    {item.title}\n    &lt;!-- item의 제목을 출력합니다. --&gt;\n  &lt;/span&gt;\n&lt;/div&gt;\n{/if}\n\n&lt;style&gt;\n  .item {\n    transition: box-shadow 0.25s ease-in;\n  }\n&lt;/style&gt;\n</code></pre>\n<p><img src=\"/svelte/svelte-setting-and-component/img/svelte_item.png\" alt=\"-\"></p>\n<p>각 <code>item</code>의 제목도 잘 출력되고, hover에도 반응하는 것을 볼 수 있습니다.</p>\n<hr>\n<p>다음 시간에는 임시로 만들었던 <code>boards</code>와 <code>items</code> 데이터를 <code>store</code>로 분리해 관리하고, 추가/삭제 등의 동작도 구현해보겠습니다.</p>\n<p><em>전체 프로젝트 코드는 <a href=\"https://github.com/hoontae24/hello-svelte\">Github</a>에서 보실 수 있습니다.</em></p>\n","excerpt":" 최신 프론트엔드 기술 중 Svelte라는 기술에 대해 TODO-App 제작을 하면서 알아보겠습니다. Svelte에 대한 소개나 API는 공식문서나 아래의 자료를 읽어주세요.  웹 프레임워크 Svelte를 소개합니다. SvelteJS(스벨트) - 새로운 개념의 프론트엔드 프레임워크  이 글은 Svelte 실습 예제입니다. 전체 프로젝트 코드는 Github에서","thumbnail":"/svelte/svelte-setting-and-component/img/svelte_2.png","thumbnailUrl":"https://hoontae24.github.io/svelte/svelte-setting-and-component/img/svelte_2.png"},"url":"https://hoontae24.github.io/3"}}