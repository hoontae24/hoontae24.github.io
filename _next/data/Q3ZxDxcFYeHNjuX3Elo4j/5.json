{"env":{"BASE_PATH":"","ARTICLES_ROOT":".articles","ARTICLE_FILENAME":"README.md"},"__N_SSG":true,"pageProps":{"post":{"href":"5","round":5,"paths":["svelte","svelte-change-list-order"],"slug":"svelte-change-list-order","title":"Svelte로 만드는 TODO-App (3), Item 순서 변경하기","description":"","date":"2019-11-29","category":"svelte","tags":["javascript","frontend","svelte"],"seriesId":2,"markdown":"\n![svelte](/svelte/svelte-change-list-order/img/svelte_2.png)\n\n이번 포스트에서는 `Item`의 순서를 변경할 수 있도록 구현하겠습니다.\n\n### 1. Item 순서 변경 구현하기\n\n`Item`의 순서를 변경하여서 Todo-App을 사용하기 좋게 만들어 보겠습니다. 순서를 변경하는 UI/UX는 심플하게 드래그해서 변경할 수 있게 만들 것입니다.\n\n`event`를 이용하여 구현할 수도 있겠지만, 해본 적도 없고 하니 이미 만들어진 라이브러리를 이용하여 적용해보겠습니다.\n\n#### 1.1 Sortablejs 라이브러리 적용하기\n\n정렬을 구현하는 여러 라이브러리 중 [Sortablejs](https://github.com/SortableJS/Sortable)를 이용하겠습니다.\n\n`npm`을 이용해서 설치하겠습니다.\n\n> $ npm install sortablejs\n\n이제 각 `Board`의 리스트에 적용해 보겠습니다. `Item`들을 감싸는 `div`를 만들어줍니다. 또 `list`라는 변수를 선언해주고 만들어 준 `div`에 바인딩 시켜주겠습니다.\n\n`svelte`로 부터 `onMount`함수를 `import`하고, 그 안에 다음과 같이 구현해주세요. `list`변수에 `div` Element가 바인딩 되면 `Sortable` 라이브러리를 적용시키도록 합니다.\n\n```html\n<!-- Board.svelte -->\n<script>\n  import { onMount } from 'svelte'\n  import Sortable from 'sortablejs'\n  \n  let list = null\n  onMount(() => {\n    if(list) {\n      new Sortable(list)\n    }\n  })\n</script>\n<div id={board.id} class=\"item-list\" bind:this={list}>\n{#each _items as item (item.id)}\n  <Item\n    {item}\n    on:update={handleUpdateItem}\n    on:remove={handleRemoveItem}\n  />\n{/each}\n</div>\n```\n\n이제 브라우저로 가서 잘 적용되었는지 확인해 봅니다. `Item`을 드래그해서 이동할 수 있게 되었고, 순서도 변경이 됩니다.\n\n하지만 DOM Element만 움직이는 것 일뿐, 아직 실제 `Store`에 있는 데이터의 순서가 변경되는 것은 아닙니다.\n\n#### 1.2 Sortablejs를 이용하여 순서 변경 구현하기\n\n`Sortablejs`를 적용하여서 `DOM Element`를 드래그로 움직일 수 있게 했습니다. 드래그로 순서가 변경될 때, `Store`에 있는 실제 데이터가 변경되도록, 이벤트 핸들러를 연결시켜주면 됩니다.\n\n먼저 그 전에 `Store`에 있는 데이터에서 `Item`의 `id` 값을 약간 수정해주고, `Item` 컴포넌트에서 드래그 핸들을 만들어주도록 하겠습니다.\n\n```js\n// stores/index.js\nconst _boards = [\n  { id: uuid(), title: 'Planning' },\n  { id: uuid(), title: 'In Progress' },\n  { id: uuid(), title: 'All Done' },\n]\n\nconst _items = [\n  { id: uuid(), boardId: _boards[0].id, title: '자료 조사하기', done: false },\n  { id: uuid(), boardId: _boards[0].id, title: '교양책 읽기', done: false },\n  { id: uuid(), boardId: _boards[1].id, title: '분리수거하기', done: false },\n  { id: uuid(), boardId: _boards[1].id, title: '가계부 정리하기', done: false },\n  { id: uuid(), boardId: _boards[2].id, title: '버그 수정하기', done: false },\n]\n\nconst createItems = () => {\n  const { subscribe, reset, update: _update, set } = items\n  // ...생략...\n  return { subscribe, reset, set, add, remove, update }\n}\n```\n\n`Board`와 `Item`의 `id`를 이용해서 비교할 때, 문자와 숫자가 섞이면 비교하기 번거로우니 모두 문자로 수정하겠습니다. 그리고 `items`에 `set`함수를 넣어줘서 순서가 변경되면 적용되는 부분에 사용하도록 하겠습니다.\n\n다음은 `Item`컴포넌트를 수정해줍니다.\n\n```html\n<!-- Item.svelte -->\n<div\n  id={item.id}\n  class=\"item card p-1 mb-2 shadow-sm\"\n  class:shadow={hovering}\n  on:mouseenter={() => hovering = true}\n  on:mouseleave={() => hovering = false}\n>\n  <span class=\"drag-handle\">=</span>\n  {#if isEditable}\n  <input bind:value={item.title} />\n  {:else}\n  <span class:item-done={item.done} on:click={handleToggleDone}>\n    {item.title}\n  </span>\n  {/if}\n  <div class=\"item-action\">\n    <button class=\"item-btn\" on:click={handleToggleEditable}>E</button>\n    <button class=\"item-btn\" on:click={handleRemoveItem}>-</button>\n  </div>\n</div>\n```\n\n`Item`의 가장 상위 `div` 태그에 `id`속성을 넣어주었고, 드래그를 위한 핸들 아이콘을 하나 만들어 주었습니다.\n\n이제 순서가 변경될 수 있도록 `Sortable`에 옵션과 이벤트를 등록합니다.\n\n```html\n<!-- Board.svelte -->\n<script>\n  const handleSortItem = e => {\n    const target = $items.find(item => item.id === e.item.id)\n    const allItems = $items.filter(item => item.id !== e.item.id)\n    const _items = allItems.filter(item => item.boardId === e.to.id)\n    target.boardId = e.to.id\n    _items.splice(e.newIndex, 0, target)\n\n    const newItems = allItems\n      .filter(item => item.boardId !== e.to.id)\n      .concat(_items)\n    items.set(newItems)\n  }\n\n  let list = null\n  onMount(() => {\n    if (list) {\n      new Sortable(list, {\n        group: 'board',\n        handle: '.drag-handle',\n        animation: 300,\n        onEnd: handleSortItem,\n      })\n    }\n  })\n</script>\n```\n\n`onMount`함수에서 `Sortable` 생성자에 옵션을 추가해줍니다.\n\n- `group`옵션은 다른 `Board`의 리스트로 드래그하여 움직일 수 있게 해줍니다.\n- `handle`옵션은 `Item`전체를 클릭하여 드래그하지 않고, `handle`에 주입된 클래스이름을 가진 `Element`를 클릭하여 드래그할 수 있게 해줍니다.\n- `animation`옵션은 드래그로 `Item`의 순서가 변경될 때, 약간의 애니매이션을 사용합니다.\n- `onEnd`옵션은 드래그가 끝났을 때, 이벤트 핸들러로 콜백 함수를 호출합니다. 실제 `Store`의 데이터를 변경하기 위해 사용됩니다.\n\n`onEnd`옵션의 이벤트 핸들러로 위에서 선언한 `handleSortItem`함수를 호출합니다. 해당 함수에서는 실제 데이터의 순서가 변경되도록 구현합니다.\n\n이제 브라우저로 가서 확인해보겠습니다.\n\n![svelte drag item](/svelte/svelte-change-list-order/img/svelte_drag_item.gif)\n\n잘 동작하는지 확인하고 싶으면, 순서 변경 후 `items`를 콘솔로 출력해보시면 됩니다.\n\n---\n\n### 마무리\n\n여기까지 **Svelte로 만드는 Todo-App**을 만들어 보았습니다. **Svelte**를 공부하기 위해서 간단히 튜토리얼이나 공식문서를 훑어보았고, 어떻게 동작하는지 실습하는 형식으로 공부하기 위해 이 시리즈의 포스트를 작성하며 공부해 보았습니다.\n\n이제 기초적인 부분을 시작했고, 전반적으로 `Svelte`로 만든 앱이 어떻게 동작하는지 조금 알았으니, 공식 문서를 꼼꼼히 읽어보며 공부하면 더 도움이 될 것이고, 이해하기도 쉬울 것입니다.\n\n*전체 프로젝트 코드는 [Github](https://github.com/hoontae24/hello-svelte)에서 보실 수 있습니다.*\n","html":"<p><img src=\"/svelte/svelte-change-list-order/img/svelte_2.png\" alt=\"svelte\"></p>\n<p>이번 포스트에서는 <code>Item</code>의 순서를 변경할 수 있도록 구현하겠습니다.</p>\n<h3 id=\"1-item-순서-변경-구현하기\">1. Item 순서 변경 구현하기</h3>\n<p><code>Item</code>의 순서를 변경하여서 Todo-App을 사용하기 좋게 만들어 보겠습니다. 순서를 변경하는 UI/UX는 심플하게 드래그해서 변경할 수 있게 만들 것입니다.</p>\n<p><code>event</code>를 이용하여 구현할 수도 있겠지만, 해본 적도 없고 하니 이미 만들어진 라이브러리를 이용하여 적용해보겠습니다.</p>\n<h4 id=\"11-sortablejs-라이브러리-적용하기\">1.1 Sortablejs 라이브러리 적용하기</h4>\n<p>정렬을 구현하는 여러 라이브러리 중 <a href=\"https://github.com/SortableJS/Sortable\">Sortablejs</a>를 이용하겠습니다.</p>\n<p><code>npm</code>을 이용해서 설치하겠습니다.</p>\n<blockquote>\n<p>$ npm install sortablejs</p>\n</blockquote>\n<p>이제 각 <code>Board</code>의 리스트에 적용해 보겠습니다. <code>Item</code>들을 감싸는 <code>div</code>를 만들어줍니다. 또 <code>list</code>라는 변수를 선언해주고 만들어 준 <code>div</code>에 바인딩 시켜주겠습니다.</p>\n<p><code>svelte</code>로 부터 <code>onMount</code>함수를 <code>import</code>하고, 그 안에 다음과 같이 구현해주세요. <code>list</code>변수에 <code>div</code> Element가 바인딩 되면 <code>Sortable</code> 라이브러리를 적용시키도록 합니다.</p>\n<pre><code class=\"language-html\">&lt;!-- Board.svelte --&gt;\n&lt;script&gt;\n  import { onMount } from &#39;svelte&#39;\n  import Sortable from &#39;sortablejs&#39;\n  \n  let list = null\n  onMount(() =&gt; {\n    if(list) {\n      new Sortable(list)\n    }\n  })\n&lt;/script&gt;\n&lt;div id={board.id} class=&quot;item-list&quot; bind:this={list}&gt;\n{#each _items as item (item.id)}\n  &lt;Item\n    {item}\n    on:update={handleUpdateItem}\n    on:remove={handleRemoveItem}\n  /&gt;\n{/each}\n&lt;/div&gt;\n</code></pre>\n<p>이제 브라우저로 가서 잘 적용되었는지 확인해 봅니다. <code>Item</code>을 드래그해서 이동할 수 있게 되었고, 순서도 변경이 됩니다.</p>\n<p>하지만 DOM Element만 움직이는 것 일뿐, 아직 실제 <code>Store</code>에 있는 데이터의 순서가 변경되는 것은 아닙니다.</p>\n<h4 id=\"12-sortablejs를-이용하여-순서-변경-구현하기\">1.2 Sortablejs를 이용하여 순서 변경 구현하기</h4>\n<p><code>Sortablejs</code>를 적용하여서 <code>DOM Element</code>를 드래그로 움직일 수 있게 했습니다. 드래그로 순서가 변경될 때, <code>Store</code>에 있는 실제 데이터가 변경되도록, 이벤트 핸들러를 연결시켜주면 됩니다.</p>\n<p>먼저 그 전에 <code>Store</code>에 있는 데이터에서 <code>Item</code>의 <code>id</code> 값을 약간 수정해주고, <code>Item</code> 컴포넌트에서 드래그 핸들을 만들어주도록 하겠습니다.</p>\n<pre><code class=\"language-js\">// stores/index.js\nconst _boards = [\n  { id: uuid(), title: &#39;Planning&#39; },\n  { id: uuid(), title: &#39;In Progress&#39; },\n  { id: uuid(), title: &#39;All Done&#39; },\n]\n\nconst _items = [\n  { id: uuid(), boardId: _boards[0].id, title: &#39;자료 조사하기&#39;, done: false },\n  { id: uuid(), boardId: _boards[0].id, title: &#39;교양책 읽기&#39;, done: false },\n  { id: uuid(), boardId: _boards[1].id, title: &#39;분리수거하기&#39;, done: false },\n  { id: uuid(), boardId: _boards[1].id, title: &#39;가계부 정리하기&#39;, done: false },\n  { id: uuid(), boardId: _boards[2].id, title: &#39;버그 수정하기&#39;, done: false },\n]\n\nconst createItems = () =&gt; {\n  const { subscribe, reset, update: _update, set } = items\n  // ...생략...\n  return { subscribe, reset, set, add, remove, update }\n}\n</code></pre>\n<p><code>Board</code>와 <code>Item</code>의 <code>id</code>를 이용해서 비교할 때, 문자와 숫자가 섞이면 비교하기 번거로우니 모두 문자로 수정하겠습니다. 그리고 <code>items</code>에 <code>set</code>함수를 넣어줘서 순서가 변경되면 적용되는 부분에 사용하도록 하겠습니다.</p>\n<p>다음은 <code>Item</code>컴포넌트를 수정해줍니다.</p>\n<pre><code class=\"language-html\">&lt;!-- Item.svelte --&gt;\n&lt;div\n  id={item.id}\n  class=&quot;item card p-1 mb-2 shadow-sm&quot;\n  class:shadow={hovering}\n  on:mouseenter={() =&gt; hovering = true}\n  on:mouseleave={() =&gt; hovering = false}\n&gt;\n  &lt;span class=&quot;drag-handle&quot;&gt;=&lt;/span&gt;\n  {#if isEditable}\n  &lt;input bind:value={item.title} /&gt;\n  {:else}\n  &lt;span class:item-done={item.done} on:click={handleToggleDone}&gt;\n    {item.title}\n  &lt;/span&gt;\n  {/if}\n  &lt;div class=&quot;item-action&quot;&gt;\n    &lt;button class=&quot;item-btn&quot; on:click={handleToggleEditable}&gt;E&lt;/button&gt;\n    &lt;button class=&quot;item-btn&quot; on:click={handleRemoveItem}&gt;-&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p><code>Item</code>의 가장 상위 <code>div</code> 태그에 <code>id</code>속성을 넣어주었고, 드래그를 위한 핸들 아이콘을 하나 만들어 주었습니다.</p>\n<p>이제 순서가 변경될 수 있도록 <code>Sortable</code>에 옵션과 이벤트를 등록합니다.</p>\n<pre><code class=\"language-html\">&lt;!-- Board.svelte --&gt;\n&lt;script&gt;\n  const handleSortItem = e =&gt; {\n    const target = $items.find(item =&gt; item.id === e.item.id)\n    const allItems = $items.filter(item =&gt; item.id !== e.item.id)\n    const _items = allItems.filter(item =&gt; item.boardId === e.to.id)\n    target.boardId = e.to.id\n    _items.splice(e.newIndex, 0, target)\n\n    const newItems = allItems\n      .filter(item =&gt; item.boardId !== e.to.id)\n      .concat(_items)\n    items.set(newItems)\n  }\n\n  let list = null\n  onMount(() =&gt; {\n    if (list) {\n      new Sortable(list, {\n        group: &#39;board&#39;,\n        handle: &#39;.drag-handle&#39;,\n        animation: 300,\n        onEnd: handleSortItem,\n      })\n    }\n  })\n&lt;/script&gt;\n</code></pre>\n<p><code>onMount</code>함수에서 <code>Sortable</code> 생성자에 옵션을 추가해줍니다.</p>\n<ul>\n<li><code>group</code>옵션은 다른 <code>Board</code>의 리스트로 드래그하여 움직일 수 있게 해줍니다.</li>\n<li><code>handle</code>옵션은 <code>Item</code>전체를 클릭하여 드래그하지 않고, <code>handle</code>에 주입된 클래스이름을 가진 <code>Element</code>를 클릭하여 드래그할 수 있게 해줍니다.</li>\n<li><code>animation</code>옵션은 드래그로 <code>Item</code>의 순서가 변경될 때, 약간의 애니매이션을 사용합니다.</li>\n<li><code>onEnd</code>옵션은 드래그가 끝났을 때, 이벤트 핸들러로 콜백 함수를 호출합니다. 실제 <code>Store</code>의 데이터를 변경하기 위해 사용됩니다.</li>\n</ul>\n<p><code>onEnd</code>옵션의 이벤트 핸들러로 위에서 선언한 <code>handleSortItem</code>함수를 호출합니다. 해당 함수에서는 실제 데이터의 순서가 변경되도록 구현합니다.</p>\n<p>이제 브라우저로 가서 확인해보겠습니다.</p>\n<p><img src=\"/svelte/svelte-change-list-order/img/svelte_drag_item.gif\" alt=\"svelte drag item\"></p>\n<p>잘 동작하는지 확인하고 싶으면, 순서 변경 후 <code>items</code>를 콘솔로 출력해보시면 됩니다.</p>\n<hr>\n<h3 id=\"마무리\">마무리</h3>\n<p>여기까지 <strong>Svelte로 만드는 Todo-App</strong>을 만들어 보았습니다. <strong>Svelte</strong>를 공부하기 위해서 간단히 튜토리얼이나 공식문서를 훑어보았고, 어떻게 동작하는지 실습하는 형식으로 공부하기 위해 이 시리즈의 포스트를 작성하며 공부해 보았습니다.</p>\n<p>이제 기초적인 부분을 시작했고, 전반적으로 <code>Svelte</code>로 만든 앱이 어떻게 동작하는지 조금 알았으니, 공식 문서를 꼼꼼히 읽어보며 공부하면 더 도움이 될 것이고, 이해하기도 쉬울 것입니다.</p>\n<p><em>전체 프로젝트 코드는 <a href=\"https://github.com/hoontae24/hello-svelte\">Github</a>에서 보실 수 있습니다.</em></p>\n","excerpt":" 이번 포스트에서는 Item의 순서를 변경할 수 있도록 구현하겠습니다. 1. Item 순서 변경 구현하기 Item의 순서를 변경하여서 Todo-App을 사용하기 좋게 만들어 보겠습니다. 순서를 변경하는 UI/UX는 심플하게 드래그해서 변경할 수 있게 만들 것입니다. event를 이용하여 구현할 수도 있겠지만, 해본 적도 없고 하니 이미 만들어진 라이브러리를 ","thumbnail":"/svelte/svelte-change-list-order/img/svelte_2.png","thumbnailUrl":"https://hoontae24.github.io/svelte/svelte-change-list-order/img/svelte_2.png"},"url":"https://hoontae24.github.io/5"}}