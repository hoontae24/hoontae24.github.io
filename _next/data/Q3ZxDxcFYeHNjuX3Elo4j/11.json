{"env":{"BASE_PATH":"","ARTICLES_ROOT":".articles","ARTICLE_FILENAME":"README.md"},"__N_SSG":true,"pageProps":{"post":{"href":"11","round":11,"paths":["git","git-frequently-used-commands"],"slug":"git-frequently-used-commands","title":"자주 사용하는 Git 명령어 정리","description":"","date":"2020-03-08","category":"git","tags":["git"],"seriesId":null,"markdown":"\n![git](/git/git-frequently-used-commands/img/git.png)\n\nGit은 개발자들이 버전 관리 도구로 많이 사용하고 있습니다. 사용하기도 쉽고, Github과 연동하면 소스 코드를 관리하기도 편리합니다. 이번 포스트에서는 Git을 사용할 때, 자주 사용하는 명령어를 정리해보도록 하겠습니다.\n\n_(단, git의 명령어의 개념과 명령어의 모든 옵션을 다루지 않습니다. 개인적으로 자주 사용하는 것들만 다루도록 하겠습니다.)_\n\n---\n\n#### Init\n\n```shell\n$ git init\n```\n\n`init`은 Git 저장소를 초기화하는 명령어입니다. 프로젝트에서 Git을 사용하려면 `git init`을 통해서 저장소를 초기화하거나, `git clone`을 이용하여 저장소를 불러와야합니다.\n\n#### Clone\n\n```shell\n$ git clone <repository> [<directory>]\n```\n\n위에서 언급하였듯이, `git clone`은 이미 저장된 저장소를 불러오는 명령어입니다. 주로 Github에 있는 저장소를 불러와 복제할 때 이용합니다.\n\n```shell\n# github 저장소 clone하기\n# <directory>를 지정하지 않으면 새로운 폴더를 생성함\n$ git clone https://github.com/<github_username>/<repository_name>.git\n\n# github 저장소 clone하기\n# 현재 위치의 폴더에 clone함\n$ git clone https://github.com/<github_username>/<repository_name>.git ./\n\n# github 저장소 clone하기\n# my_project 폴더에 clone함\n$ git clone https://github.com/<github_username>/<repository_name>.git my_project\n\n# 로컬 저장소 clone하기\n$ git clone ./other_project/.git ./other_project_2\n```\n\n#### Status\n\n```shell\n$ git status\n```\n\ngit 저장소가 생성되면, 프로젝트의 파일 변경을 감지합니다. `git status`로 변경된 파일이 무엇인지 알 수 있습니다. 또한 해당 파일들을 어떤 index로 관리하고 있는지 표시해줍니다.\n\n#### Add\n\n```shell\n$ git add <file>\n```\n\n`git add`로 추가된 파일은 staged index로 관리합니다. staged 상태의 파일은 커밋 대상이 됩니다.\n\n```shell\n# 프로젝트의 모든 변경된 파일을 staged 상태로 등록합니다.\n$ git add .\n```\n\n#### Commit\n\n```shell\n$ git commit [-m <commit_message>]\n```\n\n현재 staged 상태 파일들의 버전을 저장합니다. commit은 파일의 변경 사항들을 저장하고 hash로 commit_id를 남깁니다.\n\n```shell\n# message를 작성하는 화면에서 추가 작업 후 commit됨\n$ git commit\n\n\n# 메시지를 포함하여 즉시 commit됨\n$ git commit -m \"initial commit\"\n```\n\n#### Log\n\n```shell\n$ git log [<branch_name>]\n```\n\n저장소의 commit 내역을 확인합니다.\n\n#### Diff\n\n```shell\n$ git diff [<commit>] [<target_commit>]\n```\n\ncommit 내용의 변경 내역을 보여줍니다. \\<commit>에는 commit_hash나 branch_name이 올 수도 있습니다.\n\n```shell\n# 현재 커밋에서 변경된 부분을 보여줌\n$ git diff --stat\n\n# 현재 커밋과 \"develop\" branch의 변경 사항을 보여줌\n$ git diff --stat develop\n\n# \"release\" branch와 \"develop\" branch의 변경 사항을 보여줌\n$ git diff --stat develop release\n```\n\n#### Branch\n\n```shell\n$ git branch [<new_branch_name>] [-a] [-r] [-d,-D <branch_name>]\n```\n\n```shell\n# 로컬 저장소의 branch 목록을 보여줌\n$ git branch\n\n# 원격 저장소의 branch 목록을 보여줌\n$ git branch -r\n\n# 모든 branch 목록을 보여줌\n$ git branch -a\n\n# 현재 커밋에 새로운 branch \"develop\"을 생성함\n$ git branch develop\n\n# \"master\" branch 커밋에 새로운 branch \"develop\"을 생성함\n$ git branch develop master\n\n# \"develop\" branch를 삭제함(merge되었을 경우에만)\n$ git branch -d develop\n\n# \"develop\" branch를 삭제함(강제 삭제)\n$ git branch -D develop\n```\n\n#### Checkout\n\n```shell\n# 버전(Head)을 \"develop\" branch로 이동\n$ git checkout develop\n\n# \"develop\" branch를 생성하고, 이동\n$ git checkout -b develop\n```\n\n#### Merge\n\n```shell\n$ git merge <branch_name> [--no-ff] [--squash]\n```\n\n```shell\n# 현재 branch에 develop branch를 병합\n$ git merge develop\n\n# fast-forward 없이 병합\n$ git merge develop --no-ff\n\n# \"develop\" branch의 병합할 commit을 합쳐서 staged로 가져옴\n$ git merge develop --squash\n```\n\n#### Rebase\n\n```shell\n# 현재 branch를 \"develop\" branch에서 시작하도록 이동\n$ git rebase develop\n\n# 마지막 5개의 커밋을 수정\n$ git rebase -i head~5\n```\n\n#### Stash\n\n```shell\n# 커밋되지 않은 변경된 내용을 따로 저장(Untracked 파일을 제외)\n$ git stash\n\n# stash 한 내용을 다시 적용하고, stash에서 삭제\n$ git stash pop\n```\n\n#### Reset\n\n```shell\n# 마지막 2개의 커밋을 되돌리고 변경 내용은 유지\n$ git reset head~2\n\n# 마지막 2개의 커밋을 되돌리고 변경 내용은 삭제\n$ git reset head~2 --hard\n\n# 현재 커밋에서 변경된 내용을 삭제\n$ git reset --hard\n```\n\n#### Remote\n\n```shell\n$ git remote add <remote_name> <remote_url>\n\n# url의 저장소를 origin 원격 저장소로 추가\n$ git remote add origin https://hoontae24.github.com/hoontae24.github.io.git\n```\n\n#### Fetch\n\n```shell\n# 현재 branch의 원격 저장소 버전을 불러옴\n$ git fetch\n\n# origin 원격 저장소의 develop branch를 불러옴\n$ git fetch origin develop\n```\n\n#### Pull\n\n```shell\n# 현재 branch에 원격 저장소 버전을 덮어씀(fetch + merge)\n$ git pull\n```\n\n#### Push\n\n```shell\n# origin 원격 저장소에 develop branch 버전을 저장함\n$ git push origin develop\n```\n\n#### Config\n\n```shell\n# 현재 저장소의 config 정보를 불러옴\n$ git config --list\n\n# 전역 저장소의 config 정보를 불러옴\n$ git config --list --global\n\n# 현재 저장소의 username을 불러옴\n$ git config user.name\n\n# 현재 저장소의 email을 불러옴\n$ git config user.email\n\n# 현재 저장소의 username을 등록(수정)함\n$ git config user.name \"hoontae24\"\n\n# 현재 저장소에 git 명령어 별칭(alias)을 등록함\n$ git config alias.<alias_name> \"command\"\n\n# develop branch로 checkout하는 명령어를 alias로 등록\n$ git config alias.dev \"checkout develop\"\n$ git dev # git checkout develop\n```\n\n---\n\n#### 마무리\n\n이번 포스트에서는 제가 개인적으로 자주 사용하는 Git 명령어를 정리해보았습니다. git을 사용하면서 아직도 모르는 기능이 많이 있는데, 명령어에 대해 자세히 몰라도 어떤 명령어가 있는지 대충 기억하기만 하면 검색하여 이용할 수 있으니 이렇게 정리해둡니다.\n\n이 포스트는 명령어를 정리하여 기억하기 위한 용도이니 사실 git을 배우거나 개념을 익히기에는 설명이 너무 부족합니다. 다음에는 기본적인 git 명령어를 가지고 실습해보는 법을 알아보도록 하겠습니다.\n","html":"<p><img src=\"/git/git-frequently-used-commands/img/git.png\" alt=\"git\"></p>\n<p>Git은 개발자들이 버전 관리 도구로 많이 사용하고 있습니다. 사용하기도 쉽고, Github과 연동하면 소스 코드를 관리하기도 편리합니다. 이번 포스트에서는 Git을 사용할 때, 자주 사용하는 명령어를 정리해보도록 하겠습니다.</p>\n<p><em>(단, git의 명령어의 개념과 명령어의 모든 옵션을 다루지 않습니다. 개인적으로 자주 사용하는 것들만 다루도록 하겠습니다.)</em></p>\n<hr>\n<h4 id=\"init\">Init</h4>\n<pre><code class=\"language-shell\">$ git init\n</code></pre>\n<p><code>init</code>은 Git 저장소를 초기화하는 명령어입니다. 프로젝트에서 Git을 사용하려면 <code>git init</code>을 통해서 저장소를 초기화하거나, <code>git clone</code>을 이용하여 저장소를 불러와야합니다.</p>\n<h4 id=\"clone\">Clone</h4>\n<pre><code class=\"language-shell\">$ git clone &lt;repository&gt; [&lt;directory&gt;]\n</code></pre>\n<p>위에서 언급하였듯이, <code>git clone</code>은 이미 저장된 저장소를 불러오는 명령어입니다. 주로 Github에 있는 저장소를 불러와 복제할 때 이용합니다.</p>\n<pre><code class=\"language-shell\"># github 저장소 clone하기\n# &lt;directory&gt;를 지정하지 않으면 새로운 폴더를 생성함\n$ git clone https://github.com/&lt;github_username&gt;/&lt;repository_name&gt;.git\n\n# github 저장소 clone하기\n# 현재 위치의 폴더에 clone함\n$ git clone https://github.com/&lt;github_username&gt;/&lt;repository_name&gt;.git ./\n\n# github 저장소 clone하기\n# my_project 폴더에 clone함\n$ git clone https://github.com/&lt;github_username&gt;/&lt;repository_name&gt;.git my_project\n\n# 로컬 저장소 clone하기\n$ git clone ./other_project/.git ./other_project_2\n</code></pre>\n<h4 id=\"status\">Status</h4>\n<pre><code class=\"language-shell\">$ git status\n</code></pre>\n<p>git 저장소가 생성되면, 프로젝트의 파일 변경을 감지합니다. <code>git status</code>로 변경된 파일이 무엇인지 알 수 있습니다. 또한 해당 파일들을 어떤 index로 관리하고 있는지 표시해줍니다.</p>\n<h4 id=\"add\">Add</h4>\n<pre><code class=\"language-shell\">$ git add &lt;file&gt;\n</code></pre>\n<p><code>git add</code>로 추가된 파일은 staged index로 관리합니다. staged 상태의 파일은 커밋 대상이 됩니다.</p>\n<pre><code class=\"language-shell\"># 프로젝트의 모든 변경된 파일을 staged 상태로 등록합니다.\n$ git add .\n</code></pre>\n<h4 id=\"commit\">Commit</h4>\n<pre><code class=\"language-shell\">$ git commit [-m &lt;commit_message&gt;]\n</code></pre>\n<p>현재 staged 상태 파일들의 버전을 저장합니다. commit은 파일의 변경 사항들을 저장하고 hash로 commit_id를 남깁니다.</p>\n<pre><code class=\"language-shell\"># message를 작성하는 화면에서 추가 작업 후 commit됨\n$ git commit\n\n\n# 메시지를 포함하여 즉시 commit됨\n$ git commit -m &quot;initial commit&quot;\n</code></pre>\n<h4 id=\"log\">Log</h4>\n<pre><code class=\"language-shell\">$ git log [&lt;branch_name&gt;]\n</code></pre>\n<p>저장소의 commit 내역을 확인합니다.</p>\n<h4 id=\"diff\">Diff</h4>\n<pre><code class=\"language-shell\">$ git diff [&lt;commit&gt;] [&lt;target_commit&gt;]\n</code></pre>\n<p>commit 내용의 변경 내역을 보여줍니다. &lt;commit&gt;에는 commit_hash나 branch_name이 올 수도 있습니다.</p>\n<pre><code class=\"language-shell\"># 현재 커밋에서 변경된 부분을 보여줌\n$ git diff --stat\n\n# 현재 커밋과 &quot;develop&quot; branch의 변경 사항을 보여줌\n$ git diff --stat develop\n\n# &quot;release&quot; branch와 &quot;develop&quot; branch의 변경 사항을 보여줌\n$ git diff --stat develop release\n</code></pre>\n<h4 id=\"branch\">Branch</h4>\n<pre><code class=\"language-shell\">$ git branch [&lt;new_branch_name&gt;] [-a] [-r] [-d,-D &lt;branch_name&gt;]\n</code></pre>\n<pre><code class=\"language-shell\"># 로컬 저장소의 branch 목록을 보여줌\n$ git branch\n\n# 원격 저장소의 branch 목록을 보여줌\n$ git branch -r\n\n# 모든 branch 목록을 보여줌\n$ git branch -a\n\n# 현재 커밋에 새로운 branch &quot;develop&quot;을 생성함\n$ git branch develop\n\n# &quot;master&quot; branch 커밋에 새로운 branch &quot;develop&quot;을 생성함\n$ git branch develop master\n\n# &quot;develop&quot; branch를 삭제함(merge되었을 경우에만)\n$ git branch -d develop\n\n# &quot;develop&quot; branch를 삭제함(강제 삭제)\n$ git branch -D develop\n</code></pre>\n<h4 id=\"checkout\">Checkout</h4>\n<pre><code class=\"language-shell\"># 버전(Head)을 &quot;develop&quot; branch로 이동\n$ git checkout develop\n\n# &quot;develop&quot; branch를 생성하고, 이동\n$ git checkout -b develop\n</code></pre>\n<h4 id=\"merge\">Merge</h4>\n<pre><code class=\"language-shell\">$ git merge &lt;branch_name&gt; [--no-ff] [--squash]\n</code></pre>\n<pre><code class=\"language-shell\"># 현재 branch에 develop branch를 병합\n$ git merge develop\n\n# fast-forward 없이 병합\n$ git merge develop --no-ff\n\n# &quot;develop&quot; branch의 병합할 commit을 합쳐서 staged로 가져옴\n$ git merge develop --squash\n</code></pre>\n<h4 id=\"rebase\">Rebase</h4>\n<pre><code class=\"language-shell\"># 현재 branch를 &quot;develop&quot; branch에서 시작하도록 이동\n$ git rebase develop\n\n# 마지막 5개의 커밋을 수정\n$ git rebase -i head~5\n</code></pre>\n<h4 id=\"stash\">Stash</h4>\n<pre><code class=\"language-shell\"># 커밋되지 않은 변경된 내용을 따로 저장(Untracked 파일을 제외)\n$ git stash\n\n# stash 한 내용을 다시 적용하고, stash에서 삭제\n$ git stash pop\n</code></pre>\n<h4 id=\"reset\">Reset</h4>\n<pre><code class=\"language-shell\"># 마지막 2개의 커밋을 되돌리고 변경 내용은 유지\n$ git reset head~2\n\n# 마지막 2개의 커밋을 되돌리고 변경 내용은 삭제\n$ git reset head~2 --hard\n\n# 현재 커밋에서 변경된 내용을 삭제\n$ git reset --hard\n</code></pre>\n<h4 id=\"remote\">Remote</h4>\n<pre><code class=\"language-shell\">$ git remote add &lt;remote_name&gt; &lt;remote_url&gt;\n\n# url의 저장소를 origin 원격 저장소로 추가\n$ git remote add origin https://hoontae24.github.com/hoontae24.github.io.git\n</code></pre>\n<h4 id=\"fetch\">Fetch</h4>\n<pre><code class=\"language-shell\"># 현재 branch의 원격 저장소 버전을 불러옴\n$ git fetch\n\n# origin 원격 저장소의 develop branch를 불러옴\n$ git fetch origin develop\n</code></pre>\n<h4 id=\"pull\">Pull</h4>\n<pre><code class=\"language-shell\"># 현재 branch에 원격 저장소 버전을 덮어씀(fetch + merge)\n$ git pull\n</code></pre>\n<h4 id=\"push\">Push</h4>\n<pre><code class=\"language-shell\"># origin 원격 저장소에 develop branch 버전을 저장함\n$ git push origin develop\n</code></pre>\n<h4 id=\"config\">Config</h4>\n<pre><code class=\"language-shell\"># 현재 저장소의 config 정보를 불러옴\n$ git config --list\n\n# 전역 저장소의 config 정보를 불러옴\n$ git config --list --global\n\n# 현재 저장소의 username을 불러옴\n$ git config user.name\n\n# 현재 저장소의 email을 불러옴\n$ git config user.email\n\n# 현재 저장소의 username을 등록(수정)함\n$ git config user.name &quot;hoontae24&quot;\n\n# 현재 저장소에 git 명령어 별칭(alias)을 등록함\n$ git config alias.&lt;alias_name&gt; &quot;command&quot;\n\n# develop branch로 checkout하는 명령어를 alias로 등록\n$ git config alias.dev &quot;checkout develop&quot;\n$ git dev # git checkout develop\n</code></pre>\n<hr>\n<h4 id=\"마무리\">마무리</h4>\n<p>이번 포스트에서는 제가 개인적으로 자주 사용하는 Git 명령어를 정리해보았습니다. git을 사용하면서 아직도 모르는 기능이 많이 있는데, 명령어에 대해 자세히 몰라도 어떤 명령어가 있는지 대충 기억하기만 하면 검색하여 이용할 수 있으니 이렇게 정리해둡니다.</p>\n<p>이 포스트는 명령어를 정리하여 기억하기 위한 용도이니 사실 git을 배우거나 개념을 익히기에는 설명이 너무 부족합니다. 다음에는 기본적인 git 명령어를 가지고 실습해보는 법을 알아보도록 하겠습니다.</p>\n","excerpt":" Git은 개발자들이 버전 관리 도구로 많이 사용하고 있습니다. 사용하기도 쉽고, Github과 연동하면 소스 코드를 관리하기도 편리합니다. 이번 포스트에서는 Git을 사용할 때, 자주 사용하는 명령어를 정리해보도록 하겠습니다. (단, git의 명령어의 개념과 명령어의 모든 옵션을 다루지 않습니다. 개인적으로 자주 사용하는 것들만 다루도록 하겠습니다.)  I","thumbnail":"/git/git-frequently-used-commands/img/git.png","thumbnailUrl":"https://hoontae24.github.io/git/git-frequently-used-commands/img/git.png"},"url":"https://hoontae24.github.io/11"}}