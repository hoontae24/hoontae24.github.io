{"env":{"BASE_PATH":"","ARTICLES_ROOT":".articles","ARTICLE_FILENAME":"README.md"},"__N_SSG":true,"pageProps":{"post":{"href":"9","round":9,"paths":["node","node-dev-environment-babel-typescript-eslint"],"slug":"node-dev-environment-babel-typescript-eslint","title":"Node와 Babel + Typesciprt + Eslint 개발 환경 구성하기","description":"","date":"2020-02-07","category":"node","tags":["node","babel","typescript","eslint"],"seriesId":null,"markdown":"\n![babel, typescript, eslint](/node/node-dev-environment-babel-typescript-eslint/img/babel_typescript_eslint.png)\n\n애플리케이션을 개발할 때, 애플리케이션 자체에 대한 것이 아닌 개발자가 개발을 편하게 할 수 있도록 돕는 여러 가지 도구들이 있습니다. 개발에 앞서 그러한 개발 도구들로 개발 환경을 구성한 후, 개발을 하게 되는데요. 이 글에서는 Node.js를 기반으로 하고, `Babel` `Typescript` `Eslint`를 이용하여 개발환경을 구성해 보겠습니다.\n\n- Node.js: 자바스크립트 런타임\n- Babel: 자바스크립트 컴파일러, 최신 버전의 자바스크립트를 이전 버전으로 변환\n- Typescript: Type을 명시한 자바스크립트 슈퍼셋, 컴파일하여 자바스크립트로 변환\n- Eslint: 자바스크립트 문법 및 코딩 스타일 검사 툴\n\n_(이 글에서는 babel, typescript, eslint에 대한 소개나 개념은 깊이 다루지 않습니다.)_\n\n추가적으로 저는 VSCode를 이용하고, extensions으로 Eslint와 Prettier를 사용하는데요. 이 부분에 대해서도 함께 다루어 보겠습니다.\n\n[참조] 이 글을 작성하면서 아래의 글에 도움을 받았습니다.\n\n- [@babel/preset-typescript](https://babeljs.io/docs/en/babel-preset-typescript)\n- [바벨과 타입스크립트의 아름다운 결혼 - TOAST UI](https://ui.toast.com/weekly-pick/ko_20181220/)\n- [TypeScript ESLint 적용하기 (+ Airbnb) - Be an Overachiever](https://ivvve.github.io/2019/10/09/js/ts/typescript-eslint&airbnb/)\n\n---\n\n### Babel\n\n먼저 프로젝트 폴더에서 `npm init -y` 커맨드를 실행하여 `package.json` 파일이 생성합니다. 이제 Babel과 관련된 패키지를 설치해보겠습니다. 다음 커맨드를 실행해주세요.\n\n```bash\n$ npm i -D @babel/core @babel/cli @babel/node @babel/preset-env\n```\n\n- @babel/core: babel의 코어에 해당합니다.\n- @babel/cli: 터미널에서 babel 관련 커맨드를 실행해줍니다.\n- @babel/node: babel로 Node.js 런타임을 실행해줍니다.\n- @babel/preset-env: babel의 설정이 조합된 프리셋\n\n설치가 끝나면 루트 디렉토리에 `babel.config.json` 파일을 만들고 다음과 같이 작성합니다.\n\n```json\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```\n\n**babel**을 이용하여 컴파일할 때에는 여러 가지 설정을 해서 컴파일을 할 수 있습니다. 그러한 설정들을 미리 조합해둔 프리셋을 지정해주었습니다.\n\nbabel의 동작을 한번 확인해 볼까요? `src`폴더를 만들고 `index.js` 파일을 다음과 같이 작성해주세요.\n\n```js\n// src/index.js\n// module import 방식\nimport fs from \"fs\";\n\n// arrow function 방식\nfs.readFile(\"package.json\", (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});\n```\n\n그리고 `package.json`의 `scripts`를 다음과 같이 작성합니다.\n\n```json\n\"scripts\": {\n  \"build\": \"babel -d dist/ src\",\n  \"dev\": \"babel-node index.js\"\n}\n```\n\n`build`명령어는 `src`폴더의 파일들을 `babel`로 컴파일하고, `dist`폴더에 저장하는 구문입니다. 이제 babel을 이용해 `index.js`파일을 컴파일 해봅시다.\n\n```bash\n$ npm run build\n```\n\n프로젝트 폴더에 `dist`폴더가 생겼나요? 그 안에 `index.js`파일을 열어보세요. 기존에 작성된 `index.js` 파일의 `import`문법이나, `arrow function`문법이 다르게 변경된 것을 볼 수 있을 것입니다. `@babel/preset-env`에 미리 조합된 설정들로 컴파일된 것입니다.\n\n---\n\n### Typescript\n\n**typescript는** `.ts`의 확장자의 파일로 작성됩니다. typescript만의 문법으로 작성된 `.ts`파일을 **typescript** 컴파일러로 컴파일을 하면 `.js`파일로 변환됩니다. typescript만으로도 따로 사용할 수 있지만, 이번 프로젝트에서는 **babel**과 함께 사용해 보겠습니다.\n\n먼저 `index.js`파일을 `index.ts`파일로 이름을 변경합니다. 그리고 약간의 typescript 문법을 추가해보겠습니다. 다음과 같이 수정해주세요.\n\n```js\nimport fs from \"fs\";\n\n// typescript 문법\nlet count: number = 0;\nfs.readFile(\"package.json\", \"utf-8\", (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  count = data.split(\"\\n\").length;\n  console.log(count + \" lines\");\n});\n```\n\n`.ts`파일을 babel이 읽을 수 있도록 `package.json`의 `scripts`를 변경해줍니다.\n\n```json\n\"scripts\": {\n  \"build\": \"babel -d dist/ --extensions \\\".ts\\\" src\",\n  \"dev\": \"babel-node index.js\"\n}\n```\n\ntypescript 문법을 추가하고 `npm run build`로 babel을 실행하여 컴파일하면 에러가 발생합니다. babel의 설정이 typescript 문법을 읽지 못하기 때문인데요. typescript를 위한 설정을 해주겠습니다. 다음을 실행해서 패키지를 설치합니다.\n\n```bash\n$ npm i -D @babel/preset-typescript\n```\n\n그리고 `babel.config.json`파일을 수정해주세요.\n\n```json\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-typescript\"]\n}\n```\n\n이제 `npm run build`명령을 실행해 보세요. babel이 typescript 문법을 인식하여 에러로 처리하지 않습니다.\n\ntypescript를 컴파일할 때에도 몇가지 옵션을 설정할 수 있습니다. typescript 패키지를 설치하고, `tsconfig.json`파일을 만들어 설정해주겠습니다.\n\n```bash\n$ npm i -D npm-run-all typescript\n```\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNEXT\",\n    \"allowJs\": true,\n    \"declaration\": true,\n    \"outDir\": \"dist\",\n    \"isolatedModules\": true,\n    \"strict\": true,\n    \"noImplicitAny\": false,\n    \"moduleResolution\": \"node\",\n    \"baseUrl\": \"src\",\n    \"paths\": {},\n    \"esModuleInterop\": true,\n    \"experimentalDecorators\": true\n  },\n  \"include\": [\"src\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n```\n\ntypescript 타입 체크 명령어를 포함하도록 `package.json`의 `scripts`를 다음과 같이 변경해줍니다.\n\n```json\n\"scripts\": {\n  \"dev\": \"babel-node index.js\",\n  \"build\": \"npm-run-all types:check build:js\",\n  \"build:js\": \"babel -d dist --extensions \\\".js,.ts\\\" src\",\n  \"types:check\": \"tsc --noEmit\"\n}\n```\n\n`tsc --noEmit` 명령어를 실행하면, typescript의 타입체크만 이루어지고, 컴파일은 하지 않습니다. `npm run build`를 실행하여 typescript 타입 체크와 babel의 컴파일을 실행해봅시다.\n\n```bash\n$ npm run build\n```\n\n혹시 `Cannot find module 'fs'` 에러가 발생 하셨나요? 이 에러는 typescript가 모듈을 찾지 못해 생기는 오류입니다. 다음 패키지를 설치해주세요.\n\n```bash\n$ npm i -D @types/node\n```\n\n---\n\n### Eslint\n\n**eslint**를 이용해서 코드 문법을 검사하고, 코딩 스타일도 함께 체크해보는 기능을 추가하겠습니다.\n\n먼저 eslint를 설치합니다. 그리고 필요한 몇가지 패키지도 함께 설치하겠습니다.\n\n```bash\n$ npm i -D eslint eslint-config-airbnb-base eslint-plugin-import\n\n$ npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser\n```\n\n설치가 되었다면 `.eslintrc`파일을 생성해주세요.\n\n```json\n{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\"],\n  \"extends\": [\n    \"eslint-config-airbnb-base\",\n    \"plugin:@typescript-eslint/eslint-recommended\"\n  ]\n}\n```\n\n그리고 eslint를 실행하는 `scripts`를 `package.json`에 추가합니다.\n\n```json\n\"scripts\": {\n  \"lint:check\": \"eslint src/**/*.ts\",\n  \"lint:fix\": \"eslint --fix src/**/*.ts\"\n}\n```\n\n이제 `lint:check`를 실행하면, eslint가 `.eslintrc`의 설정으로 문법 및 코딩 스타일을 체크해줍니다. `lint:fix`를 실행하면 코드를 자동으로 고쳐줍니다.\n\n---\n\n#### Eslint - Prettier 함께 사용하기\n\n저는 VSCode에서 Prettier와 Eslint를 함께 사용하는데요, Prettier의 설정과 Eslint의 설정이 충돌을 일으키기 때문에 따로 설정을 해 주어야 합니다. 그렇지 않으면 같은 내용의 설정을 eslint와 prettier에서 각각 두번 해주어야 하는 불편함이 생기기 때문입니다.\n\neslint의 관련 패키지를 설치해줍니다.\n\n```bash\n$ npm i -D eslint-config-prettier eslint-plugin-prettier prettier\n```\n\n그리고 `.eslintrc`파일의 `extends` 부분에 다음을 추가해줍니다.\n\n```json\n\"extends\": [\n  \"plugin:prettier/recommended\"\n]\n```\n\n위 설정에는 두 가지가 적용되는데요. 첫번째로 `eslint-config-prettier`는 eslint와 prettier의 충돌되는 규칙들을 eslint가 무시해줍니다. prettier로 설정될 부분들은 eslint에서 담당하지 않겠다는 뜻입니다.\n\n두번째로 `eslint-plugin-prettier`는 prettier에서 설정한 규칙들을 eslint의 에러로 표시한다는 뜻입니다. 충돌되는 규칙들을 eslint가 무시해준다면 해당 규칙들에 대해 에러를 표시할 수 있도록 prettier의 규칙들을 에러로 표시한다는 것입니다.\n\n`.prettierrc` 파일을 만들어 prettier에 적용할 규칙을 작성해주세요.\n\n```json\n{\n  \"singleQuote\": true\n}\n```\n\n이렇게 하면 `.prettierrc`에 적용된 규칙은 eslint가 간섭하지 않습니다. 또한 그 규칙들에 대한 오류를 eslint가 'prettier'라는 이름의 규칙으로 표시해줍니다.\n\n---\n\n### 마무리\n\nbabel과 typescript를 적용한 컴파일 설정과 eslint를 통해 코드를 검사하고 수정하는 부분을 구성해 보았습니다. 가장 기본적인 설정 방법을 함께 적용해보았는데요, 사용자에 맞게 더 많은 기능을 추가할 수도 있습니다.\n\n기회가 된다면 세부적인 기능들에 대한 리뷰와 적용기도 한 번 작성해보도록 하겠습니다.\n","html":"<p><img src=\"/node/node-dev-environment-babel-typescript-eslint/img/babel_typescript_eslint.png\" alt=\"babel, typescript, eslint\"></p>\n<p>애플리케이션을 개발할 때, 애플리케이션 자체에 대한 것이 아닌 개발자가 개발을 편하게 할 수 있도록 돕는 여러 가지 도구들이 있습니다. 개발에 앞서 그러한 개발 도구들로 개발 환경을 구성한 후, 개발을 하게 되는데요. 이 글에서는 Node.js를 기반으로 하고, <code>Babel</code> <code>Typescript</code> <code>Eslint</code>를 이용하여 개발환경을 구성해 보겠습니다.</p>\n<ul>\n<li>Node.js: 자바스크립트 런타임</li>\n<li>Babel: 자바스크립트 컴파일러, 최신 버전의 자바스크립트를 이전 버전으로 변환</li>\n<li>Typescript: Type을 명시한 자바스크립트 슈퍼셋, 컴파일하여 자바스크립트로 변환</li>\n<li>Eslint: 자바스크립트 문법 및 코딩 스타일 검사 툴</li>\n</ul>\n<p><em>(이 글에서는 babel, typescript, eslint에 대한 소개나 개념은 깊이 다루지 않습니다.)</em></p>\n<p>추가적으로 저는 VSCode를 이용하고, extensions으로 Eslint와 Prettier를 사용하는데요. 이 부분에 대해서도 함께 다루어 보겠습니다.</p>\n<p>[참조] 이 글을 작성하면서 아래의 글에 도움을 받았습니다.</p>\n<ul>\n<li><a href=\"https://babeljs.io/docs/en/babel-preset-typescript\">@babel/preset-typescript</a></li>\n<li><a href=\"https://ui.toast.com/weekly-pick/ko_20181220/\">바벨과 타입스크립트의 아름다운 결혼 - TOAST UI</a></li>\n<li><a href=\"https://ivvve.github.io/2019/10/09/js/ts/typescript-eslint&amp;airbnb/\">TypeScript ESLint 적용하기 (+ Airbnb) - Be an Overachiever</a></li>\n</ul>\n<hr>\n<h3 id=\"babel\">Babel</h3>\n<p>먼저 프로젝트 폴더에서 <code>npm init -y</code> 커맨드를 실행하여 <code>package.json</code> 파일이 생성합니다. 이제 Babel과 관련된 패키지를 설치해보겠습니다. 다음 커맨드를 실행해주세요.</p>\n<pre><code class=\"language-bash\">$ npm i -D @babel/core @babel/cli @babel/node @babel/preset-env\n</code></pre>\n<ul>\n<li>@babel/core: babel의 코어에 해당합니다.</li>\n<li>@babel/cli: 터미널에서 babel 관련 커맨드를 실행해줍니다.</li>\n<li>@babel/node: babel로 Node.js 런타임을 실행해줍니다.</li>\n<li>@babel/preset-env: babel의 설정이 조합된 프리셋</li>\n</ul>\n<p>설치가 끝나면 루트 디렉토리에 <code>babel.config.json</code> 파일을 만들고 다음과 같이 작성합니다.</p>\n<pre><code class=\"language-json\">{\n  &quot;presets&quot;: [&quot;@babel/preset-env&quot;]\n}\n</code></pre>\n<p><strong>babel</strong>을 이용하여 컴파일할 때에는 여러 가지 설정을 해서 컴파일을 할 수 있습니다. 그러한 설정들을 미리 조합해둔 프리셋을 지정해주었습니다.</p>\n<p>babel의 동작을 한번 확인해 볼까요? <code>src</code>폴더를 만들고 <code>index.js</code> 파일을 다음과 같이 작성해주세요.</p>\n<pre><code class=\"language-js\">// src/index.js\n// module import 방식\nimport fs from &quot;fs&quot;;\n\n// arrow function 방식\nfs.readFile(&quot;package.json&quot;, (err, data) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});\n</code></pre>\n<p>그리고 <code>package.json</code>의 <code>scripts</code>를 다음과 같이 작성합니다.</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n  &quot;build&quot;: &quot;babel -d dist/ src&quot;,\n  &quot;dev&quot;: &quot;babel-node index.js&quot;\n}\n</code></pre>\n<p><code>build</code>명령어는 <code>src</code>폴더의 파일들을 <code>babel</code>로 컴파일하고, <code>dist</code>폴더에 저장하는 구문입니다. 이제 babel을 이용해 <code>index.js</code>파일을 컴파일 해봅시다.</p>\n<pre><code class=\"language-bash\">$ npm run build\n</code></pre>\n<p>프로젝트 폴더에 <code>dist</code>폴더가 생겼나요? 그 안에 <code>index.js</code>파일을 열어보세요. 기존에 작성된 <code>index.js</code> 파일의 <code>import</code>문법이나, <code>arrow function</code>문법이 다르게 변경된 것을 볼 수 있을 것입니다. <code>@babel/preset-env</code>에 미리 조합된 설정들로 컴파일된 것입니다.</p>\n<hr>\n<h3 id=\"typescript\">Typescript</h3>\n<p><strong>typescript는</strong> <code>.ts</code>의 확장자의 파일로 작성됩니다. typescript만의 문법으로 작성된 <code>.ts</code>파일을 <strong>typescript</strong> 컴파일러로 컴파일을 하면 <code>.js</code>파일로 변환됩니다. typescript만으로도 따로 사용할 수 있지만, 이번 프로젝트에서는 <strong>babel</strong>과 함께 사용해 보겠습니다.</p>\n<p>먼저 <code>index.js</code>파일을 <code>index.ts</code>파일로 이름을 변경합니다. 그리고 약간의 typescript 문법을 추가해보겠습니다. 다음과 같이 수정해주세요.</p>\n<pre><code class=\"language-js\">import fs from &quot;fs&quot;;\n\n// typescript 문법\nlet count: number = 0;\nfs.readFile(&quot;package.json&quot;, &quot;utf-8&quot;, (err, data) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  count = data.split(&quot;\\n&quot;).length;\n  console.log(count + &quot; lines&quot;);\n});\n</code></pre>\n<p><code>.ts</code>파일을 babel이 읽을 수 있도록 <code>package.json</code>의 <code>scripts</code>를 변경해줍니다.</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n  &quot;build&quot;: &quot;babel -d dist/ --extensions \\&quot;.ts\\&quot; src&quot;,\n  &quot;dev&quot;: &quot;babel-node index.js&quot;\n}\n</code></pre>\n<p>typescript 문법을 추가하고 <code>npm run build</code>로 babel을 실행하여 컴파일하면 에러가 발생합니다. babel의 설정이 typescript 문법을 읽지 못하기 때문인데요. typescript를 위한 설정을 해주겠습니다. 다음을 실행해서 패키지를 설치합니다.</p>\n<pre><code class=\"language-bash\">$ npm i -D @babel/preset-typescript\n</code></pre>\n<p>그리고 <code>babel.config.json</code>파일을 수정해주세요.</p>\n<pre><code class=\"language-json\">{\n  &quot;presets&quot;: [&quot;@babel/preset-env&quot;, &quot;@babel/preset-typescript&quot;]\n}\n</code></pre>\n<p>이제 <code>npm run build</code>명령을 실행해 보세요. babel이 typescript 문법을 인식하여 에러로 처리하지 않습니다.</p>\n<p>typescript를 컴파일할 때에도 몇가지 옵션을 설정할 수 있습니다. typescript 패키지를 설치하고, <code>tsconfig.json</code>파일을 만들어 설정해주겠습니다.</p>\n<pre><code class=\"language-bash\">$ npm i -D npm-run-all typescript\n</code></pre>\n<pre><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;ESNEXT&quot;,\n    &quot;allowJs&quot;: true,\n    &quot;declaration&quot;: true,\n    &quot;outDir&quot;: &quot;dist&quot;,\n    &quot;isolatedModules&quot;: true,\n    &quot;strict&quot;: true,\n    &quot;noImplicitAny&quot;: false,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;baseUrl&quot;: &quot;src&quot;,\n    &quot;paths&quot;: {},\n    &quot;esModuleInterop&quot;: true,\n    &quot;experimentalDecorators&quot;: true\n  },\n  &quot;include&quot;: [&quot;src&quot;],\n  &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]\n}\n</code></pre>\n<p>typescript 타입 체크 명령어를 포함하도록 <code>package.json</code>의 <code>scripts</code>를 다음과 같이 변경해줍니다.</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n  &quot;dev&quot;: &quot;babel-node index.js&quot;,\n  &quot;build&quot;: &quot;npm-run-all types:check build:js&quot;,\n  &quot;build:js&quot;: &quot;babel -d dist --extensions \\&quot;.js,.ts\\&quot; src&quot;,\n  &quot;types:check&quot;: &quot;tsc --noEmit&quot;\n}\n</code></pre>\n<p><code>tsc --noEmit</code> 명령어를 실행하면, typescript의 타입체크만 이루어지고, 컴파일은 하지 않습니다. <code>npm run build</code>를 실행하여 typescript 타입 체크와 babel의 컴파일을 실행해봅시다.</p>\n<pre><code class=\"language-bash\">$ npm run build\n</code></pre>\n<p>혹시 <code>Cannot find module &#39;fs&#39;</code> 에러가 발생 하셨나요? 이 에러는 typescript가 모듈을 찾지 못해 생기는 오류입니다. 다음 패키지를 설치해주세요.</p>\n<pre><code class=\"language-bash\">$ npm i -D @types/node\n</code></pre>\n<hr>\n<h3 id=\"eslint\">Eslint</h3>\n<p><strong>eslint</strong>를 이용해서 코드 문법을 검사하고, 코딩 스타일도 함께 체크해보는 기능을 추가하겠습니다.</p>\n<p>먼저 eslint를 설치합니다. 그리고 필요한 몇가지 패키지도 함께 설치하겠습니다.</p>\n<pre><code class=\"language-bash\">$ npm i -D eslint eslint-config-airbnb-base eslint-plugin-import\n\n$ npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser\n</code></pre>\n<p>설치가 되었다면 <code>.eslintrc</code>파일을 생성해주세요.</p>\n<pre><code class=\"language-json\">{\n  &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,\n  &quot;plugins&quot;: [&quot;@typescript-eslint&quot;],\n  &quot;extends&quot;: [\n    &quot;eslint-config-airbnb-base&quot;,\n    &quot;plugin:@typescript-eslint/eslint-recommended&quot;\n  ]\n}\n</code></pre>\n<p>그리고 eslint를 실행하는 <code>scripts</code>를 <code>package.json</code>에 추가합니다.</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n  &quot;lint:check&quot;: &quot;eslint src/**/*.ts&quot;,\n  &quot;lint:fix&quot;: &quot;eslint --fix src/**/*.ts&quot;\n}\n</code></pre>\n<p>이제 <code>lint:check</code>를 실행하면, eslint가 <code>.eslintrc</code>의 설정으로 문법 및 코딩 스타일을 체크해줍니다. <code>lint:fix</code>를 실행하면 코드를 자동으로 고쳐줍니다.</p>\n<hr>\n<h4 id=\"eslint---prettier-함께-사용하기\">Eslint - Prettier 함께 사용하기</h4>\n<p>저는 VSCode에서 Prettier와 Eslint를 함께 사용하는데요, Prettier의 설정과 Eslint의 설정이 충돌을 일으키기 때문에 따로 설정을 해 주어야 합니다. 그렇지 않으면 같은 내용의 설정을 eslint와 prettier에서 각각 두번 해주어야 하는 불편함이 생기기 때문입니다.</p>\n<p>eslint의 관련 패키지를 설치해줍니다.</p>\n<pre><code class=\"language-bash\">$ npm i -D eslint-config-prettier eslint-plugin-prettier prettier\n</code></pre>\n<p>그리고 <code>.eslintrc</code>파일의 <code>extends</code> 부분에 다음을 추가해줍니다.</p>\n<pre><code class=\"language-json\">&quot;extends&quot;: [\n  &quot;plugin:prettier/recommended&quot;\n]\n</code></pre>\n<p>위 설정에는 두 가지가 적용되는데요. 첫번째로 <code>eslint-config-prettier</code>는 eslint와 prettier의 충돌되는 규칙들을 eslint가 무시해줍니다. prettier로 설정될 부분들은 eslint에서 담당하지 않겠다는 뜻입니다.</p>\n<p>두번째로 <code>eslint-plugin-prettier</code>는 prettier에서 설정한 규칙들을 eslint의 에러로 표시한다는 뜻입니다. 충돌되는 규칙들을 eslint가 무시해준다면 해당 규칙들에 대해 에러를 표시할 수 있도록 prettier의 규칙들을 에러로 표시한다는 것입니다.</p>\n<p><code>.prettierrc</code> 파일을 만들어 prettier에 적용할 규칙을 작성해주세요.</p>\n<pre><code class=\"language-json\">{\n  &quot;singleQuote&quot;: true\n}\n</code></pre>\n<p>이렇게 하면 <code>.prettierrc</code>에 적용된 규칙은 eslint가 간섭하지 않습니다. 또한 그 규칙들에 대한 오류를 eslint가 &#39;prettier&#39;라는 이름의 규칙으로 표시해줍니다.</p>\n<hr>\n<h3 id=\"마무리\">마무리</h3>\n<p>babel과 typescript를 적용한 컴파일 설정과 eslint를 통해 코드를 검사하고 수정하는 부분을 구성해 보았습니다. 가장 기본적인 설정 방법을 함께 적용해보았는데요, 사용자에 맞게 더 많은 기능을 추가할 수도 있습니다.</p>\n<p>기회가 된다면 세부적인 기능들에 대한 리뷰와 적용기도 한 번 작성해보도록 하겠습니다.</p>\n","excerpt":" 애플리케이션을 개발할 때, 애플리케이션 자체에 대한 것이 아닌 개발자가 개발을 편하게 할 수 있도록 돕는 여러 가지 도구들이 있습니다. 개발에 앞서 그러한 개발 도구들로 개발 환경을 구성한 후, 개발을 하게 되는데요. 이 글에서는 Node.js를 기반으로 하고, Babel Typescript Eslint를 이용하여 개발환경을 구성해 보겠습니다.  Node.","thumbnail":"/node/node-dev-environment-babel-typescript-eslint/img/babel_typescript_eslint.png","thumbnailUrl":"https://hoontae24.github.io/node/node-dev-environment-babel-typescript-eslint/img/babel_typescript_eslint.png"},"url":"https://hoontae24.github.io/9"}}