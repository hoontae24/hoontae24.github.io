{"env":{"BASE_PATH":"","ARTICLES_ROOT":".articles","ARTICLE_FILENAME":"README.md"},"__N_SSG":true,"pageProps":{"post":{"href":"17","round":17,"paths":["node","sequelize-cli-with-typescript"],"slug":"sequelize-cli-with-typescript","title":"sequelize-cli를 typescript와 함께 사용하기","description":"sequelize-cli를 typescript와 함께 사용할 수 있도록 세팅해보겠습니다.","date":"2021-10-02","category":"node","tags":["node","orm","sequelize"],"seriesId":null,"markdown":"\n![sequelize-cli typescript](/node/sequelize-cli-with-typescript/img/sequelize-and-typescript.png)\n\nNodeJS 환경에서 `Sequelize`를 사용할 때 `sequelize-cli`를 사용하면 `Model 생성`, `Migration 관리`, `시드 구성` 등의 기능을 CLI에서 사용할 수 있습니다. 하지만 `sequelize-cli`는 자바스크립트 기반으로 동작하고, 관련 파일을 `JS`파일로 작성해야 합니다. `sequelize-cli`를 사용할 때 `typescript`를 적용해서 사용할 수 있는 방법을 소개합니다.\n\n`sequelize`, `seqeuzlie-cli` 패키지를 미리 설치하겠습니다.\n\n```sh\nnpm i sequelize sequelize-cli\n```\n\n## 핵심 원리\n\n`sequelize-cli`를 사용하면서 `config.json` 파일이나 `migrations` 폴더를 커스터마이징하고 싶을 때 [.sequelizerc](https://sequelize.org/master/manual/migrations.html#the--code--sequelizerc--code--file) 파일을 작성하면 됩니다. `sequelize-cli`가 명령을 실행할 때 `.sequelizerc`파일을 읽고 작성된 설정대로 동작하는 것입니다.\n\n`sequelize-cli`가 `.sequelizerc`파일을 읽을 때, `babel`을 이용하여 `typescript`를 사용할 수 있도록 설정할 수 있습니다. 기본적으로 작성하는 `config.json`, `migrations` 등의 파일을 `typescript`로 작성할 수 있고, 다른 `ts`파일을 모듈로 `import`할 수 있습니다.\n\n간단한 실습으로 확인해보겠습니다.\n\n## BABEL 설정\n\n`babel` 및 `typescript` 관련 패키지를 먼저 설치합니다.\n\n```sh\nnpm i @babel/core @babel/register @babel/preset-env @babel/preset-typescript @babel/runtime @babel/plugin-transform-runtime typescript\n```\n\n`sequelize-cli`에서 `babel`을 이용할 수 있도록 하는 핵심 패키지는 `@babel/register`입니다.\n\n`.babelrc` 또는 `babel.config.json` 파일에 다음와 같이 `typescript` 설정을 추가합니다.\n\n```json\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-typescript\"],\n  \"plugins\": [\"@babel/plugin-transform-runtime\"]\n}\n```\n\n이제 `babel`이 `@babel/preset-typescript` 설정으로 인해 `typescript`를 읽을 준비가 되었습니다. `.sequelizerc`파일에서 `@babel/register`를 불러와 런타임에서 `babel`이 동작하도록 설정합니다.\n\n```js\n// .sequelizerc\n// runtime에서 babel을 사용(이 포스트의 핵심 코드)\nrequire(\"@babel/register\")({\n  configFile: \"./.babelrc\",\n  extensions: [\".js\", \".ts\"],\n});\n\nconst path = require(\"path\");\n\nmodule.exports = {\n  config: path.resolve(\"db\", \"config.ts\"),\n  \"models-path\": path.resolve(\"db\", \"models\"),\n  \"seeders-path\": path.resolve(\"db\", \"seeders\"),\n  \"migrations-path\": path.resolve(\"db\", \"migrations\"),\n};\n```\n\n이제 `sequelize-cli`가 동작할 때 `.babelrc`에서 작성된 설정대로 동작합니다.\n\n## sequelize-cli\n\n순수 `sequelize-cli`를 사용할 때는 `js`, `json` 파일로 생성됩니다. 현재 `babel`을 이용한 설정은 `sequelize-cli`가 관련 파일을 읽는 것을 도와주는 역할입니다. 그래서 `sequelize-cli`를 이용하여 생성되는 파일은 여전히 `js` 파일로 생성됩니다. 그래서 파일이 생성된 후에 `ts` 파일로 변경하고 코드를 재작성해야 합니다.\n\n### 초기화\n\n```sh\nnpx sequelize-cli init\n```\n\n초기화를 실행하면 `.sequelizerc`에서 작성한 대로 파일이 생성됩니다. 위에서 작성한 대로 진행하면 `db`폴더가 생성되고 그 아래에 `config.ts`파일이 있습니다. 기본 코드가 `json`으로 작성되었기 때문에 `ts` 코드로 재작성해줍니다.\n\n```ts\n// db/config.ts\nimport { Options } from \"sequelize/types\";\n\nexport const development: Options = {\n  username: \"development\",\n  password: \"development\",\n  database: \"development\",\n  host: \"localhost\",\n  port: 5432,\n  dialect: \"postgres\",\n};\n```\n\n이렇게 하면 타입 지원을 받을 수 있고, 외부 모듈에서 값을 불러올 수도 있습니다. 예로, `dotenv`에서 선언된 값을 사용할 수도 있겠네요.\n\n### 마이그레이션 생성\n\n제가 `sequelize-cli`를 `typescript`로 사용하려는 가장 큰 이유가 바로 마이그레이션 작성 때문입니다. 마이그레이션 코드를 작성할 때, 다른 모듈을 `import`하여 작성할 경우도 있고 기존 프로젝트 코드와의 일관성을 위해 타입을 지원받고 싶습니다.\n\n```sh\nnpx sequelize-cli migration:generate --name initialize\n```\n\n위 명령어로 마이그레이션을 생성하면 `db/migrations` 폴더 아래에 새로운 마이그레이션 파일이 생성됩니다. 해당 파일은 `js` 파일로 생성되기 때문에 `ts` 파일로 재작성 해야 합니다. 재작성하는 것이 귀찮을 수도 있지만 기존 프로젝트 모듈과 타입을 그대로 적용할 수 있는 것이 훨씬 개발 경험에 유리하다고 생각됩니다.\n\n생성된 마이그레이션의 코드를 다음과 같이 새롭게 작성합니다.\n\n```ts\nimport { QueryInterface, DataTypes } from \"sequelize\";\n\ntype T = typeof DataTypes;\n\nexport const up = async (queryInterface: QueryInterface, DataTypes: T) => {\n  await queryInterface.createTable(\"User\", {\n    id: {\n      type: DataTypes.INTEGER,\n      primaryKey: true,\n      allowNull: false,\n      autoIncrement: true,\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n  });\n};\nexport const down = async (queryInterface: QueryInterface, DataTypes: T) => {\n  await queryInterface.dropTable(\"User\");\n};\n```\n\n작성된 마이그레이션을 실행해보겠습니다.\n\n```sh\nnpx sequelize-cli db:migrate\n```\n\n![screenshot](/node/sequelize-cli-with-typescript/img/run-migration-result.png)\n\n작성한 마이그레이션 내용처럼 테이블이 생성되었습니다. 성공입니다!\n\n## 마무리\n\n위에서 언급한 것처럼 `sequelize-cli`에서 `typescript`를 사용할 수 없다는 것은 크게 두가지 불편함이 있습니다.\n\n- Sequelize DB Config, 모델, 시드, 마이그레이션 코드에서 타입 지원을 받을 수 없다.\n- 타입스크립트 기반 프로젝트의 모듈을 불러올 수 없고, 코드 일관성이 떨어진다.\n\n이 불편을 해결하기 위해서는 자체적으로 마이그레이션 등의 코드를 `ts`로 작성하여 사용할 수도 있습니다. 하지만 그렇게 하면 `sequelize-cli`가 관리하는 기능을 온전히 사용하지 못합니다.\n\n사실 이 포스트의 주제는 **`sequelize-cli`에 `babel` 적용하기**가 더 적당할 것 같지만, 타입스크립트를 적용하는 것에 큰 의미가 있고 이것으로 제가 겪은 문제를 해결하였기 때문에 `typescript` 적용에 초점을 맞추어 보았습니다.\n\n> 예제 코드는 [Github](https://github.com/hoontae24/blog-examples/tree/main/node/sequelize-cli-with-typescript)에서 확인할 수 있습니다.\n","html":"<p><img src=\"/node/sequelize-cli-with-typescript/img/sequelize-and-typescript.png\" alt=\"sequelize-cli typescript\"></p>\n<p>NodeJS 환경에서 <code>Sequelize</code>를 사용할 때 <code>sequelize-cli</code>를 사용하면 <code>Model 생성</code>, <code>Migration 관리</code>, <code>시드 구성</code> 등의 기능을 CLI에서 사용할 수 있습니다. 하지만 <code>sequelize-cli</code>는 자바스크립트 기반으로 동작하고, 관련 파일을 <code>JS</code>파일로 작성해야 합니다. <code>sequelize-cli</code>를 사용할 때 <code>typescript</code>를 적용해서 사용할 수 있는 방법을 소개합니다.</p>\n<p><code>sequelize</code>, <code>seqeuzlie-cli</code> 패키지를 미리 설치하겠습니다.</p>\n<pre><code class=\"language-sh\">npm i sequelize sequelize-cli\n</code></pre>\n<h2 id=\"핵심-원리\">핵심 원리</h2>\n<p><code>sequelize-cli</code>를 사용하면서 <code>config.json</code> 파일이나 <code>migrations</code> 폴더를 커스터마이징하고 싶을 때 <a href=\"https://sequelize.org/master/manual/migrations.html#the--code--sequelizerc--code--file\">.sequelizerc</a> 파일을 작성하면 됩니다. <code>sequelize-cli</code>가 명령을 실행할 때 <code>.sequelizerc</code>파일을 읽고 작성된 설정대로 동작하는 것입니다.</p>\n<p><code>sequelize-cli</code>가 <code>.sequelizerc</code>파일을 읽을 때, <code>babel</code>을 이용하여 <code>typescript</code>를 사용할 수 있도록 설정할 수 있습니다. 기본적으로 작성하는 <code>config.json</code>, <code>migrations</code> 등의 파일을 <code>typescript</code>로 작성할 수 있고, 다른 <code>ts</code>파일을 모듈로 <code>import</code>할 수 있습니다.</p>\n<p>간단한 실습으로 확인해보겠습니다.</p>\n<h2 id=\"babel-설정\">BABEL 설정</h2>\n<p><code>babel</code> 및 <code>typescript</code> 관련 패키지를 먼저 설치합니다.</p>\n<pre><code class=\"language-sh\">npm i @babel/core @babel/register @babel/preset-env @babel/preset-typescript @babel/runtime @babel/plugin-transform-runtime typescript\n</code></pre>\n<p><code>sequelize-cli</code>에서 <code>babel</code>을 이용할 수 있도록 하는 핵심 패키지는 <code>@babel/register</code>입니다.</p>\n<p><code>.babelrc</code> 또는 <code>babel.config.json</code> 파일에 다음와 같이 <code>typescript</code> 설정을 추가합니다.</p>\n<pre><code class=\"language-json\">{\n  &quot;presets&quot;: [&quot;@babel/preset-env&quot;, &quot;@babel/preset-typescript&quot;],\n  &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;]\n}\n</code></pre>\n<p>이제 <code>babel</code>이 <code>@babel/preset-typescript</code> 설정으로 인해 <code>typescript</code>를 읽을 준비가 되었습니다. <code>.sequelizerc</code>파일에서 <code>@babel/register</code>를 불러와 런타임에서 <code>babel</code>이 동작하도록 설정합니다.</p>\n<pre><code class=\"language-js\">// .sequelizerc\n// runtime에서 babel을 사용(이 포스트의 핵심 코드)\nrequire(&quot;@babel/register&quot;)({\n  configFile: &quot;./.babelrc&quot;,\n  extensions: [&quot;.js&quot;, &quot;.ts&quot;],\n});\n\nconst path = require(&quot;path&quot;);\n\nmodule.exports = {\n  config: path.resolve(&quot;db&quot;, &quot;config.ts&quot;),\n  &quot;models-path&quot;: path.resolve(&quot;db&quot;, &quot;models&quot;),\n  &quot;seeders-path&quot;: path.resolve(&quot;db&quot;, &quot;seeders&quot;),\n  &quot;migrations-path&quot;: path.resolve(&quot;db&quot;, &quot;migrations&quot;),\n};\n</code></pre>\n<p>이제 <code>sequelize-cli</code>가 동작할 때 <code>.babelrc</code>에서 작성된 설정대로 동작합니다.</p>\n<h2 id=\"sequelize-cli\">sequelize-cli</h2>\n<p>순수 <code>sequelize-cli</code>를 사용할 때는 <code>js</code>, <code>json</code> 파일로 생성됩니다. 현재 <code>babel</code>을 이용한 설정은 <code>sequelize-cli</code>가 관련 파일을 읽는 것을 도와주는 역할입니다. 그래서 <code>sequelize-cli</code>를 이용하여 생성되는 파일은 여전히 <code>js</code> 파일로 생성됩니다. 그래서 파일이 생성된 후에 <code>ts</code> 파일로 변경하고 코드를 재작성해야 합니다.</p>\n<h3 id=\"초기화\">초기화</h3>\n<pre><code class=\"language-sh\">npx sequelize-cli init\n</code></pre>\n<p>초기화를 실행하면 <code>.sequelizerc</code>에서 작성한 대로 파일이 생성됩니다. 위에서 작성한 대로 진행하면 <code>db</code>폴더가 생성되고 그 아래에 <code>config.ts</code>파일이 있습니다. 기본 코드가 <code>json</code>으로 작성되었기 때문에 <code>ts</code> 코드로 재작성해줍니다.</p>\n<pre><code class=\"language-ts\">// db/config.ts\nimport { Options } from &quot;sequelize/types&quot;;\n\nexport const development: Options = {\n  username: &quot;development&quot;,\n  password: &quot;development&quot;,\n  database: &quot;development&quot;,\n  host: &quot;localhost&quot;,\n  port: 5432,\n  dialect: &quot;postgres&quot;,\n};\n</code></pre>\n<p>이렇게 하면 타입 지원을 받을 수 있고, 외부 모듈에서 값을 불러올 수도 있습니다. 예로, <code>dotenv</code>에서 선언된 값을 사용할 수도 있겠네요.</p>\n<h3 id=\"마이그레이션-생성\">마이그레이션 생성</h3>\n<p>제가 <code>sequelize-cli</code>를 <code>typescript</code>로 사용하려는 가장 큰 이유가 바로 마이그레이션 작성 때문입니다. 마이그레이션 코드를 작성할 때, 다른 모듈을 <code>import</code>하여 작성할 경우도 있고 기존 프로젝트 코드와의 일관성을 위해 타입을 지원받고 싶습니다.</p>\n<pre><code class=\"language-sh\">npx sequelize-cli migration:generate --name initialize\n</code></pre>\n<p>위 명령어로 마이그레이션을 생성하면 <code>db/migrations</code> 폴더 아래에 새로운 마이그레이션 파일이 생성됩니다. 해당 파일은 <code>js</code> 파일로 생성되기 때문에 <code>ts</code> 파일로 재작성 해야 합니다. 재작성하는 것이 귀찮을 수도 있지만 기존 프로젝트 모듈과 타입을 그대로 적용할 수 있는 것이 훨씬 개발 경험에 유리하다고 생각됩니다.</p>\n<p>생성된 마이그레이션의 코드를 다음과 같이 새롭게 작성합니다.</p>\n<pre><code class=\"language-ts\">import { QueryInterface, DataTypes } from &quot;sequelize&quot;;\n\ntype T = typeof DataTypes;\n\nexport const up = async (queryInterface: QueryInterface, DataTypes: T) =&gt; {\n  await queryInterface.createTable(&quot;User&quot;, {\n    id: {\n      type: DataTypes.INTEGER,\n      primaryKey: true,\n      allowNull: false,\n      autoIncrement: true,\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n  });\n};\nexport const down = async (queryInterface: QueryInterface, DataTypes: T) =&gt; {\n  await queryInterface.dropTable(&quot;User&quot;);\n};\n</code></pre>\n<p>작성된 마이그레이션을 실행해보겠습니다.</p>\n<pre><code class=\"language-sh\">npx sequelize-cli db:migrate\n</code></pre>\n<p><img src=\"/node/sequelize-cli-with-typescript/img/run-migration-result.png\" alt=\"screenshot\"></p>\n<p>작성한 마이그레이션 내용처럼 테이블이 생성되었습니다. 성공입니다!</p>\n<h2 id=\"마무리\">마무리</h2>\n<p>위에서 언급한 것처럼 <code>sequelize-cli</code>에서 <code>typescript</code>를 사용할 수 없다는 것은 크게 두가지 불편함이 있습니다.</p>\n<ul>\n<li>Sequelize DB Config, 모델, 시드, 마이그레이션 코드에서 타입 지원을 받을 수 없다.</li>\n<li>타입스크립트 기반 프로젝트의 모듈을 불러올 수 없고, 코드 일관성이 떨어진다.</li>\n</ul>\n<p>이 불편을 해결하기 위해서는 자체적으로 마이그레이션 등의 코드를 <code>ts</code>로 작성하여 사용할 수도 있습니다. 하지만 그렇게 하면 <code>sequelize-cli</code>가 관리하는 기능을 온전히 사용하지 못합니다.</p>\n<p>사실 이 포스트의 주제는 <strong><code>sequelize-cli</code>에 <code>babel</code> 적용하기</strong>가 더 적당할 것 같지만, 타입스크립트를 적용하는 것에 큰 의미가 있고 이것으로 제가 겪은 문제를 해결하였기 때문에 <code>typescript</code> 적용에 초점을 맞추어 보았습니다.</p>\n<blockquote>\n<p>예제 코드는 <a href=\"https://github.com/hoontae24/blog-examples/tree/main/node/sequelize-cli-with-typescript\">Github</a>에서 확인할 수 있습니다.</p>\n</blockquote>\n","excerpt":"sequelize-cli를 typescript와 함께 사용할 수 있도록 세팅해보겠습니다. NodeJS 환경에서 Sequelize를 사용할 때 sequelize-cli를 사용하면 Model 생성, Migration 관리, 시드 구성 등의 기능을 CLI에서 사용할 수 있습니다. 하지만 sequelize-cli는 자바스크립트 기반으로 동작하고, 관련 파일을 JS파일로 작성해야 합니다. sequelize-cli를 사용할 때 typescript를 적용해","thumbnail":"/node/sequelize-cli-with-typescript/img/sequelize-and-typescript.png","thumbnailUrl":"https://hoontae24.github.io/node/sequelize-cli-with-typescript/img/sequelize-and-typescript.png"},"url":"https://hoontae24.github.io/17"}}